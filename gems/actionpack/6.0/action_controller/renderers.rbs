# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionController::Renderers
  # Adds a new renderer to call within controller actions.
  # A renderer is invoked by passing its name as an option to
  # <tt>AbstractController::Rendering#render</tt>. To create a renderer
  # pass it a name and a block. The block takes two arguments, the first
  # is the value paired with its key and the second is the remaining
  # hash of options passed to +render+.
  #
  # Create a csv renderer:
  #
  #   ActionController::Renderers.add :csv do |obj, options|
  #     filename = options[:filename] || 'data'
  #     str = obj.respond_to?(:to_csv) ? obj.to_csv : obj.to_s
  #     send_data str, type: Mime[:csv],
  #       disposition: "attachment; filename=#{filename}.csv"
  #   end
  #
  # Note that we used Mime[:csv] for the csv mime type as it comes with Rails.
  # For a custom renderer, you'll need to register a mime type with
  # <tt>Mime::Type.register</tt>.
  #
  # To use the csv renderer in a controller action:
  #
  #   def show
  #     @csvable = Csvable.find(params[:id])
  #     respond_to do |format|
  #       format.html
  #       format.csv { render csv: @csvable, filename: @csvable.name }
  #     end
  #   end
  def self.add: (untyped key) ?{ () -> untyped } -> untyped
  # This method is the opposite of add method.
  #
  # To remove a csv renderer:
  #
  #   ActionController::Renderers.remove(:csv)
  def self.remove: (untyped key) -> untyped
  def self._render_with_renderer_method_name: (untyped key) -> ::String
  # Called by +render+ in <tt>AbstractController::Rendering</tt>
  # which sets the return value as the +response_body+.
  #
  # If no renderer is found, +super+ returns control to
  # <tt>ActionView::Rendering.render_to_body</tt>, if present.
  def render_to_body: (untyped options) -> untyped
  def _render_to_body_with_renderer: (untyped options) -> (untyped | nil)
  extend ActiveSupport::Concern
  RENDERERS: Set[Symbol]
end
