# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionController::RequestForgeryProtection
  # The actual before_action that is used to verify the CSRF token.
  # Don't override this directly. Provide your own forgery protection
  # strategy instead. If you override, you'll disable same-origin
  # <tt><script></tt> verification.
  #
  # Lean on the protect_from_forgery declaration to mark which actions are
  # due for same-origin request verification. If protect_from_forgery is
  # enabled on an action, this before_action flags its after_action to
  # verify that JavaScript responses are for XHR requests, ensuring they
  # follow the browser's same-origin policy.
  private def verify_authenticity_token: () -> untyped
  private def handle_unverified_request: () -> untyped
  # If +verify_authenticity_token+ was run (indicating that we have
  # forgery protection enabled for this request) then also verify that
  # we aren't serving an unauthorized cross-origin response.
  private def verify_same_origin_request: () -> (untyped | nil)
  # GET requests are checked for cross-origin JavaScript after rendering.
  private def mark_for_same_origin_verification!: () -> untyped
  # If the +verify_authenticity_token+ before_action ran, verify that
  # JavaScript responses are only served to same-origin GET requests.
  private def marked_for_same_origin_verification?: () -> untyped
  # Check for cross-origin JavaScript responses.
  private def non_xhr_javascript_response?: () -> untyped
  # Returns true or false if a request is verified. Checks:
  #
  # * Is it a GET or HEAD request? GETs should be safe and idempotent
  # * Does the form_authenticity_token match the given token value from the params?
  # * Does the X-CSRF-Token header match the form_authenticity_token?
  private def verified_request?: () -> untyped
  # Checks if any of the authenticity tokens from the request are valid.
  private def any_authenticity_token_valid?: () -> untyped
  # Possible authenticity tokens sent in the request.
  private def request_authenticity_tokens: () -> ::Array[untyped]
  # Sets the token value for the current session.
  private def form_authenticity_token: (?form_options: ::Hash[untyped, untyped]) -> untyped
  # Creates a masked version of the authenticity token that varies
  # on each request. The masking is used to mitigate SSL attacks
  # like BREACH.
  private def masked_authenticity_token: (untyped session, ?form_options: ::Hash[untyped, untyped]) -> untyped
  # Checks the client's masked token to see if it matches the
  # session token. Essentially the inverse of
  # +masked_authenticity_token+.
  private def valid_authenticity_token?: (untyped session, untyped encoded_masked_token) -> (false | untyped)
  private def unmask_token: (untyped masked_token) -> untyped
  private def mask_token: (untyped raw_token) -> untyped
  private def compare_with_real_token: (untyped token, untyped session) -> untyped
  private def compare_with_global_token: (untyped token, untyped session) -> untyped
  private def valid_per_form_csrf_token?: (untyped token, untyped session) -> (untyped | false)
  private def real_csrf_token: (untyped session) -> untyped
  private def per_form_csrf_token: (untyped session, untyped action_path, untyped method) -> untyped
  private def global_csrf_token: (untyped session) -> untyped
  private def csrf_token_hmac: (untyped session, untyped identifier) -> untyped
  private def xor_byte_strings: (untyped s1, untyped s2) -> untyped
  # The form's authenticity parameter. Override to provide your own.
  private def form_authenticity_param: () -> untyped
  # Checks if the controller allows forgery protection.
  private def protect_against_forgery?: () -> untyped
  # Checks if the request originated from the same origin by looking at the
  # Origin header.
  private def valid_request_origin?: () -> (untyped | true)
  private def normalize_action_path: (untyped action_path) -> untyped
  private def generate_csrf_token: () -> untyped
  private def encode_csrf_token: (untyped csrf_token) -> untyped
  private def decode_csrf_token: (untyped encoded_csrf_token) -> untyped
  include AbstractController::Helpers
  include AbstractController::Callbacks
  extend ActiveSupport::Concern
  AUTHENTICITY_TOKEN_LENGTH: Integer
  NULL_ORIGIN_MESSAGE: String
end
