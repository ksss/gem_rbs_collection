# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionDispatch::Http::URL
  # Returns the domain part of a host given the domain level.
  #
  #    # Top-level domain example
  #    extract_domain('www.example.com', 1) # => "example.com"
  #    # Second-level domain example
  #    extract_domain('dev.www.example.co.uk', 2) # => "example.co.uk"
  def self.extract_domain: (untyped host, untyped tld_length) -> (untyped | nil)
  # Returns the subdomains of a host as an Array given the domain level.
  #
  #    # Top-level domain example
  #    extract_subdomains('www.example.com', 1) # => ["www"]
  #    # Second-level domain example
  #    extract_subdomains('dev.www.example.co.uk', 2) # => ["dev", "www"]
  def self.extract_subdomains: (untyped host, untyped tld_length) -> (untyped | ::Array[untyped])
  # Returns the subdomains of a host as a String given the domain level.
  #
  #    # Top-level domain example
  #    extract_subdomain('www.example.com', 1) # => "www"
  #    # Second-level domain example
  #    extract_subdomain('dev.www.example.co.uk', 2) # => "dev.www"
  def self.extract_subdomain: (untyped host, untyped tld_length) -> untyped
  def self.url_for: (untyped options) -> untyped
  def self.full_url_for: (untyped options) -> untyped
  def self.path_for: (untyped options) -> untyped
  private def self.add_params: (untyped path, untyped params) -> untyped
  private def self.add_anchor: (untyped path, untyped anchor) -> (untyped | nil)
  private def self.extract_domain_from: (untyped host, untyped tld_length) -> untyped
  private def self.extract_subdomains_from: (untyped host, untyped tld_length) -> untyped
  private def self.add_trailing_slash: (untyped path) -> (untyped | untyped | nil)
  private def self.build_host_url: (untyped host, untyped port, untyped protocol, untyped options, untyped path) -> untyped
  private def self.named_host?: (untyped host) -> untyped
  private def self.normalize_protocol: (untyped protocol) -> untyped
  private def self.normalize_host: (untyped _host, untyped options) -> untyped
  private def self.normalize_port: (untyped port, untyped protocol) { (untyped) -> untyped } -> (nil | untyped)
  def initialize: () -> void
  # Returns the complete URL used for this request.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com'
  #   req.url # => "http://example.com"
  def url: () -> untyped
  # Returns 'https://' if this is an SSL request and 'http://' otherwise.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com'
  #   req.protocol # => "http://"
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com', 'HTTPS' => 'on'
  #   req.protocol # => "https://"
  def protocol: () -> untyped
  # Returns the \host and port for this request, such as "example.com:8080".
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com'
  #   req.raw_host_with_port # => "example.com"
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:80'
  #   req.raw_host_with_port # => "example.com:80"
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.raw_host_with_port # => "example.com:8080"
  def raw_host_with_port: () -> untyped
  # Returns the host for this request, such as "example.com".
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.host # => "example.com"
  def host: () -> untyped
  # Returns a \host:\port string for this request, such as "example.com" or
  # "example.com:8080". Port is only included if it is not a default port
  # (80 or 443)
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com'
  #   req.host_with_port # => "example.com"
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:80'
  #   req.host_with_port # => "example.com"
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.host_with_port # => "example.com:8080"
  def host_with_port: () -> ::String
  # Returns the port number of this request as an integer.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com'
  #   req.port # => 80
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.port # => 8080
  def port: () -> untyped
  # Returns the standard \port number for this request's protocol.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.standard_port # => 80
  def standard_port: () -> untyped
  # Returns whether this request is using the standard port
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:80'
  #   req.standard_port? # => true
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.standard_port? # => false
  def standard_port?: () -> untyped
  # Returns a number \port suffix like 8080 if the \port number of this request
  # is not the default HTTP \port 80 or HTTPS \port 443.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:80'
  #   req.optional_port # => nil
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.optional_port # => 8080
  def optional_port: () -> (nil | untyped)
  # Returns a string \port suffix, including colon, like ":8080" if the \port
  # number of this request is not the default HTTP \port 80 or HTTPS \port 443.
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:80'
  #   req.port_string # => ""
  #
  #   req = ActionDispatch::Request.new 'HTTP_HOST' => 'example.com:8080'
  #   req.port_string # => ":8080"
  def port_string: () -> ("" | ::String)
  # Returns the requested port, such as 8080, based on SERVER_PORT
  #
  #   req = ActionDispatch::Request.new 'SERVER_PORT' => '80'
  #   req.server_port # => 80
  #
  #   req = ActionDispatch::Request.new 'SERVER_PORT' => '8080'
  #   req.server_port # => 8080
  def server_port: () -> untyped
  # Returns the \domain part of a \host, such as "rubyonrails.org" in "www.rubyonrails.org". You can specify
  # a different <tt>tld_length</tt>, such as 2 to catch rubyonrails.co.uk in "www.rubyonrails.co.uk".
  def domain: (?untyped tld_length) -> untyped
  # Returns all the \subdomains as an array, so <tt>["dev", "www"]</tt> would be
  # returned for "dev.www.rubyonrails.org". You can specify a different <tt>tld_length</tt>,
  # such as 2 to catch <tt>["www"]</tt> instead of <tt>["www", "rubyonrails"]</tt>
  # in "www.rubyonrails.co.uk".
  def subdomains: (?untyped tld_length) -> untyped
  # Returns all the \subdomains as a string, so <tt>"dev.www"</tt> would be
  # returned for "dev.www.rubyonrails.org". You can specify a different <tt>tld_length</tt>,
  # such as 2 to catch <tt>"www"</tt> instead of <tt>"www.rubyonrails"</tt>
  # in "www.rubyonrails.co.uk".
  def subdomain: (?untyped tld_length) -> untyped
  def self.tld_length: () -> untyped
  def tld_length: () -> untyped
  def self.tld_length=: (untyped val) -> untyped
  def tld_length=: (untyped val) -> untyped
  HOST_REGEXP: Regexp
  IP_HOST_REGEXP: Regexp
  PROTOCOL_REGEXP: Regexp
end
