# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionDispatch::Routing::UrlFor
  def initialize: () -> void
  # Hook overridden in controller to add request information
  # with +default_url_options+. Application logic should not
  # go into url_options.
  def url_options: () -> untyped
  # Generate a URL based on the options provided, default_url_options and the
  # routes defined in routes.rb. The following options are supported:
  #
  # * <tt>:only_path</tt> - If true, the relative URL is returned. Defaults to +false+.
  # * <tt>:protocol</tt> - The protocol to connect to. Defaults to 'http'.
  # * <tt>:host</tt> - Specifies the host the link should be targeted at.
  #   If <tt>:only_path</tt> is false, this option must be
  #   provided either explicitly, or via +default_url_options+.
  # * <tt>:subdomain</tt> - Specifies the subdomain of the link, using the +tld_length+
  #   to split the subdomain from the host.
  #   If false, removes all subdomains from the host part of the link.
  # * <tt>:domain</tt> - Specifies the domain of the link, using the +tld_length+
  #   to split the domain from the host.
  # * <tt>:tld_length</tt> - Number of labels the TLD id composed of, only used if
  #   <tt>:subdomain</tt> or <tt>:domain</tt> are supplied. Defaults to
  #   <tt>ActionDispatch::Http::URL.tld_length</tt>, which in turn defaults to 1.
  # * <tt>:port</tt> - Optionally specify the port to connect to.
  # * <tt>:anchor</tt> - An anchor name to be appended to the path.
  # * <tt>:params</tt> - The query parameters to be appended to the path.
  # * <tt>:trailing_slash</tt> - If true, adds a trailing slash, as in "/archive/2009/"
  # * <tt>:script_name</tt> - Specifies application path relative to domain root. If provided, prepends application path.
  #
  # Any other key (<tt>:controller</tt>, <tt>:action</tt>, etc.) given to
  # +url_for+ is forwarded to the Routes module.
  #
  #    url_for controller: 'tasks', action: 'testing', host: 'somehost.org', port: '8080'
  #    # => 'http://somehost.org:8080/tasks/testing'
  #    url_for controller: 'tasks', action: 'testing', host: 'somehost.org', anchor: 'ok', only_path: true
  #    # => '/tasks/testing#ok'
  #    url_for controller: 'tasks', action: 'testing', trailing_slash: true
  #    # => 'http://somehost.org/tasks/testing/'
  #    url_for controller: 'tasks', action: 'testing', host: 'somehost.org', number: '33'
  #    # => 'http://somehost.org/tasks/testing?number=33'
  #    url_for controller: 'tasks', action: 'testing', host: 'somehost.org', script_name: "/myapp"
  #    # => 'http://somehost.org/myapp/tasks/testing'
  #    url_for controller: 'tasks', action: 'testing', host: 'somehost.org', script_name: "/myapp", only_path: true
  #    # => '/myapp/tasks/testing'
  #
  # Missing routes keys may be filled in from the current request's parameters
  # (e.g. +:controller+, +:action+, +:id+ and any other parameters that are
  # placed in the path). Given that the current action has been reached
  # through <tt>GET /users/1</tt>:
  #
  #   url_for(only_path: true)                        # => '/users/1'
  #   url_for(only_path: true, action: 'edit')        # => '/users/1/edit'
  #   url_for(only_path: true, action: 'edit', id: 2) # => '/users/2/edit'
  #
  # Notice that no +:id+ parameter was provided to the first +url_for+ call
  # and the helper used the one from the route's path. Any path parameter
  # implicitly used by +url_for+ can always be overwritten like shown on the
  # last +url_for+ calls.
  def url_for: (?untyped? options) -> untyped
  def full_url_for: (?untyped? options) -> untyped
  # Allows calling direct or regular named route.
  #
  #   resources :buckets
  #
  #   direct :recordable do |recording|
  #     route_for(:bucket, recording.bucket)
  #   end
  #
  #   direct :threadable do |threadable|
  #     route_for(:recordable, threadable.parent)
  #   end
  #
  # This maintains the context of the original caller on
  # whether to return a path or full URL, e.g:
  #
  #   threadable_path(threadable)  # => "/buckets/1"
  #   threadable_url(threadable)   # => "http://example.com/buckets/1"
  #
  def route_for: (untyped name, *untyped args) -> untyped
  def optimize_routes_generation?: () -> untyped
  private def _with_routes: (untyped routes) { () -> untyped } -> untyped
  private def _routes_context: () -> self
  include ActionDispatch::Routing::PolymorphicRoutes
  extend ActiveSupport::Concern
end
