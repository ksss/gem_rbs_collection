# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActionDispatch::Request
  def self.empty: () -> untyped
  def initialize: (untyped env) -> void
  def commit_cookie_jar!: () -> nil
  def controller_class: () -> untyped
  def controller_class_for: (untyped name) -> untyped
  # Returns true if the request has a header matching the given key parameter.
  #
  #    request.key? :ip_spoofing_check # => true
  def key?: (untyped key) -> untyped
  alias raw_request_method request_method
  # Returns the HTTP \method that the application should see.
  # In the case where the \method was overridden by a middleware
  # (for instance, if a HEAD request was converted to a GET,
  # or if a _method parameter was used to determine the \method
  # the application should use), this \method returns the overridden
  # value, not the original.
  def request_method: () -> untyped
  def routes: () -> untyped
  def routes=: (untyped routes) -> untyped
  def engine_script_name: (untyped _routes) -> untyped
  def engine_script_name=: (untyped name) -> untyped
  def request_method=: (untyped request_method) -> (untyped | nil)
  def controller_instance: () -> untyped
  def controller_instance=: (untyped controller) -> untyped
  def http_auth_salt: () -> untyped
  def show_exceptions?: () -> untyped
  # Returns a symbol form of the #request_method.
  def request_method_symbol: () -> untyped
  # Returns the original value of the environment's REQUEST_METHOD,
  # even if it was overridden by middleware. See #request_method for
  # more information.
  def method: () -> untyped
  # Returns a symbol form of the #method.
  def method_symbol: () -> untyped
  # Provides access to the request's HTTP headers, for example:
  #
  #   request.headers["Content-Type"] # => "text/plain"
  def headers: () -> untyped
  # Early Hints is an HTTP/2 status code that indicates hints to help a client start
  # making preparations for processing the final response.
  #
  # If the env contains +rack.early_hints+ then the server accepts HTTP2 push for Link headers.
  #
  # The +send_early_hints+ method accepts a hash of links as follows:
  #
  #   send_early_hints("Link" => "</style.css>; rel=preload; as=style\n</script.js>; rel=preload")
  #
  # If you are using +javascript_include_tag+ or +stylesheet_link_tag+ the
  # Early Hints headers are included by default if supported.
  def send_early_hints: (untyped links) -> (nil | untyped)
  # Returns a +String+ with the last requested path including their params.
  #
  #    # get '/foo'
  #    request.original_fullpath # => '/foo'
  #
  #    # get '/foo?bar'
  #    request.original_fullpath # => '/foo?bar'
  def original_fullpath: () -> untyped
  # Returns the +String+ full path including params of the last URL requested.
  #
  #    # get "/articles"
  #    request.fullpath # => "/articles"
  #
  #    # get "/articles?page=2"
  #    request.fullpath # => "/articles?page=2"
  def fullpath: () -> untyped
  # Returns the original request URL as a +String+.
  #
  #    # get "/articles?page=2"
  #    request.original_url # => "http://www.example.com/articles?page=2"
  def original_url: () -> untyped
  # The +String+ MIME type of the request.
  #
  #    # get "/articles"
  #    request.media_type # => "application/x-www-form-urlencoded"
  def media_type: () -> untyped
  # Returns the content length of the request as an integer.
  def content_length: () -> untyped
  # Returns true if the "X-Requested-With" header contains "XMLHttpRequest"
  # (case-insensitive), which may need to be manually added depending on the
  # choice of JavaScript libraries and frameworks.
  def xml_http_request?: () -> untyped
  alias xhr? xml_http_request?
  # Returns the IP address of client as a +String+.
  def ip: () -> untyped
  # Returns the IP address of client as a +String+,
  # usually set by the RemoteIp middleware.
  def remote_ip: () -> untyped
  def remote_ip=: (untyped remote_ip) -> untyped
  # Returns the unique request id, which is based on either the X-Request-Id header that can
  # be generated by a firewall, load balancer, or web server or by the RequestId middleware
  # (which sets the action_dispatch.request_id environment variable).
  #
  # This unique ID is useful for tracing a request from end-to-end as part of logging or debugging.
  # This relies on the Rack variable set by the ActionDispatch::RequestId middleware.
  def request_id: () -> untyped
  def request_id=: (untyped id) -> untyped
  alias uuid request_id
  # Returns the lowercase name of the HTTP server software.
  def server_software: () -> (untyped | nil)
  # Read the request \body. This is useful for web services that need to
  # work with raw requests directly.
  def raw_post: () -> untyped
  # The request body is an IO input stream. If the RAW_POST_DATA environment
  # variable is already set, wrap it in a StringIO.
  def body: () -> untyped
  # Determine whether the request body contains form-data by checking
  # the request Content-Type for one of the media-types:
  # "application/x-www-form-urlencoded" or "multipart/form-data". The
  # list of form-data media types can be modified through the
  # +FORM_DATA_MEDIA_TYPES+ array.
  #
  # A request body is not assumed to contain form-data when no
  # Content-Type header is provided and the request_method is POST.
  def form_data?: () -> untyped
  def body_stream: () -> untyped
  # TODO This should be broken apart into AD::Request::Session and probably
  # be included by the session middleware.
  def reset_session: () -> untyped
  def session=: (untyped session) -> untyped
  def session_options=: (untyped options) -> untyped
  # Override Rack's GET method to support indifferent access.
  def GET: () -> untyped
  alias query_parameters GET
  # Override Rack's POST method to support indifferent access.
  def POST: () -> untyped
  alias request_parameters POST
  # Returns the authorization header regardless of whether it was specified directly or through one of the
  # proxy alternatives.
  def authorization: () -> untyped
  # True if the request came from localhost, 127.0.0.1, or ::1.
  def local?: () -> untyped
  def request_parameters=: (untyped params) -> untyped
  def logger: () -> untyped
  def commit_flash: () -> nil
  def ssl?: () -> untyped
  def inspect: () -> ::String
  private def check_method: (untyped name) -> untyped
  def cookie_jar: () -> untyped
  def have_cookie_jar?: () -> untyped
  def cookie_jar=: (untyped jar) -> untyped
  def key_generator: () -> untyped
  def signed_cookie_salt: () -> untyped
  def encrypted_cookie_salt: () -> untyped
  def encrypted_signed_cookie_salt: () -> untyped
  def authenticated_encrypted_cookie_salt: () -> untyped
  def use_authenticated_cookie_encryption: () -> untyped
  def encrypted_cookie_cipher: () -> untyped
  def signed_cookie_digest: () -> untyped
  def secret_key_base: () -> untyped
  def cookies_serializer: () -> untyped
  def cookies_same_site_protection: () -> untyped
  def cookies_digest: () -> untyped
  def cookies_rotations: () -> untyped
  def use_cookies_with_metadata: () -> untyped
  include Rack::Request::Helpers
  include ActionDispatch::Http::Cache::Request
  include ActionDispatch::Http::MimeNegotiation
  include ActionDispatch::Http::Parameters
  include ActionDispatch::Http::FilterParameters
  include ActionDispatch::Http::URL
  include ActionDispatch::ContentSecurityPolicy::Request
  include ActionDispatch::PermissionsPolicy::Request
  include Rack::Request::Env
  extend ActionDispatch::Http::Parameters::ClassMethods
  prepend ActionDispatch::Flash::RequestMethods
  attr_reader self.parameter_parsers: untyped
  def self.ignore_accept_header: () -> untyped
  def ignore_accept_header: () -> untyped
  def self.ignore_accept_header=: (untyped val) -> untyped
  def ignore_accept_header=: (untyped val) -> untyped
  ACTION_DISPATCH_REQUEST_ID: String
  ENV_METHODS: Array[String]
  HTTP_METHODS: Array[String]
  HTTP_METHOD_LOOKUP: Hash[String, Symbol]
  LOCALHOST: Regexp
  RFC2518: Array[String]
  RFC2616: Array[String]
  RFC3253: Array[String]
  RFC3648: Array[String]
  RFC3744: Array[String]
  RFC4791: Array[String]
  RFC5323: Array[String]
  RFC5789: Array[String]
end
