# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module AbstractController::Caching::Fragments
  # Given a key (as described in +expire_fragment+), returns
  # a key array suitable for use in reading, writing, or expiring a
  # cached fragment. All keys begin with <tt>:views</tt>,
  # followed by <tt>ENV["RAILS_CACHE_ID"]</tt> or <tt>ENV["RAILS_APP_VERSION"]</tt> if set,
  # followed by any controller-wide key prefix values, ending
  # with the specified +key+ value.
  def combined_fragment_cache_key: (untyped key) -> untyped
  # Writes +content+ to the location signified by
  # +key+ (see +expire_fragment+ for acceptable formats).
  def write_fragment: (untyped key, untyped content, ?untyped? options) -> untyped
  # Reads a cached fragment from the location signified by +key+
  # (see +expire_fragment+ for acceptable formats).
  def read_fragment: (untyped key, ?untyped? options) -> (nil | untyped)
  # Check if a cached fragment from the location signified by
  # +key+ exists (see +expire_fragment+ for acceptable formats).
  def fragment_exist?: (untyped key, ?untyped? options) -> (nil | untyped)
  # Removes fragments from the cache.
  #
  # +key+ can take one of three forms:
  #
  # * String - This would normally take the form of a path, like
  #   <tt>pages/45/notes</tt>.
  # * Hash - Treated as an implicit call to +url_for+, like
  #   <tt>{ controller: 'pages', action: 'notes', id: 45}</tt>
  # * Regexp - Will remove any fragment that matches, so
  #   <tt>%r{pages/\d*/notes}</tt> might remove all notes. Make sure you
  #   don't use anchors in the regex (<tt>^</tt> or <tt>$</tt>) because
  #   the actual filename matched looks like
  #   <tt>./cache/filename/path.cache</tt>. Note: Regexp expiration is
  #   only supported on caches that can iterate over all keys (unlike
  #   memcached).
  #
  # +options+ is passed through to the cache store's +delete+
  # method (or <tt>delete_matched</tt>, for Regexp keys).
  def expire_fragment: (untyped key, ?untyped? options) -> (nil | untyped)
  def instrument_fragment_cache: (untyped name, untyped key) ?{ () -> untyped } -> untyped
  extend ActiveSupport::Concern
end
