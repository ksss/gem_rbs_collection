# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActionDispatch::ContentSecurityPolicy
  def initialize: () { (untyped) -> untyped } -> void
  def initialize_copy: (untyped other) -> untyped
  # Specify whether to prevent the user agent from loading any assets over
  # HTTP when the page uses HTTPS:
  #
  #   policy.block_all_mixed_content
  #
  # Pass +false+ to allow it again:
  #
  #   policy.block_all_mixed_content false
  #
  def block_all_mixed_content: (?bool enabled) -> untyped
  # Restricts the set of plugins that can be embedded:
  #
  #   policy.plugin_types "application/x-shockwave-flash"
  #
  # Leave empty to allow all plugins:
  #
  #   policy.plugin_types
  #
  def plugin_types: (*untyped types) -> untyped
  # Enable the {report-uri}[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri]
  # directive. Violation reports will be sent to the specified URI:
  #
  #   policy.report_uri "/csp-violation-report-endpoint"
  #
  def report_uri: (untyped uri) -> untyped
  # Specify asset types for which {Subresource Integrity}[https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity]
  # is required:
  #
  #   policy.require_sri_for :script, :style
  #
  # Leave empty to not require Subresource Integrity:
  #
  #   policy.require_sri_for
  #
  def require_sri_for: (*untyped types) -> untyped
  # Specify whether a {sandbox}[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/sandbox]
  # should be enabled for the requested resource:
  #
  #   policy.sandbox
  #
  # Values can be passed as arguments:
  #
  #   policy.sandbox "allow-scripts", "allow-modals"
  #
  # Pass +false+ to disable the sandbox:
  #
  #   policy.sandbox false
  #
  def sandbox: (*untyped values) -> untyped
  # Specify whether user agents should treat any assets over HTTP as HTTPS:
  #
  #   policy.upgrade_insecure_requests
  #
  # Pass +false+ to disable it:
  #
  #   policy.upgrade_insecure_requests false
  #
  def upgrade_insecure_requests: (?bool enabled) -> untyped
  def build: (?untyped? context, ?untyped? nonce, ?untyped? nonce_directives) -> untyped
  private def apply_mappings: (untyped sources) -> untyped
  private def apply_mapping: (untyped source) -> untyped
  private def build_directives: (untyped context, untyped nonce, untyped nonce_directives) -> untyped
  private def build_directive: (untyped sources, untyped context) -> untyped
  private def resolve_source: (untyped source, untyped context) -> untyped
  private def nonce_directive?: (untyped directive, untyped nonce_directives) -> untyped
  attr_reader directives: untyped
end
