# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionDispatch::SystemTesting::TestHelpers::ScreenshotHelper
  # Takes a screenshot of the current page in the browser.
  #
  # +take_screenshot+ can be used at any point in your system tests to take
  # a screenshot of the current state. This can be useful for debugging or
  # automating visual testing. You can take multiple screenshots per test
  # to investigate changes at different points during your test. These will be
  # named with a sequential prefix (or 'failed' for failing tests)
  #
  # The screenshot will be displayed in your console, if supported.
  #
  # The default screenshots directory is +tmp/screenshots+ but you can set a different
  # one with +Capybara.save_path+
  #
  # You can set the +RAILS_SYSTEM_TESTING_SCREENSHOT_HTML+ environment variable to
  # save the HTML from the page that is being screenshotted so you can investigate the
  # elements on the page at the time of the screenshot
  #
  # You can set the +RAILS_SYSTEM_TESTING_SCREENSHOT+ environment variable to
  # control the output. Possible values are:
  # * [+simple+ (default)]    Only displays the screenshot path.
  #                           This is the default value.
  # * [+inline+]              Display the screenshot in the terminal using the
  #                           iTerm image protocol (https://iterm2.com/documentation-images.html).
  # * [+artifact+]            Display the screenshot in the terminal, using the terminal
  #                           artifact format (https://buildkite.github.io/terminal-to-html/inline-images/).
  def take_screenshot: () -> untyped
  # Takes a screenshot of the current page in the browser if the test
  # failed.
  #
  # +take_failed_screenshot+ is called during system test teardown.
  def take_failed_screenshot: () -> (untyped | nil)
  private def save_html?: () -> untyped
  private def increment_unique: () -> untyped
  private def unique: () -> ("failures" | untyped)
  private def image_name: () -> untyped
  private def image_path: () -> untyped
  private def html_path: () -> untyped
  private def absolute_path: () -> untyped
  private def screenshots_dir: () -> untyped
  private def absolute_image_path: () -> ::String
  private def absolute_html_path: () -> ::String
  private def save_html: () -> untyped
  private def save_image: () -> untyped
  private def output_type: () -> untyped
  private def display_image: () -> untyped
  private def inline_base64: (untyped path) -> untyped
  private def failed?: () -> untyped
  private def supports_screenshot?: () -> untyped
end
