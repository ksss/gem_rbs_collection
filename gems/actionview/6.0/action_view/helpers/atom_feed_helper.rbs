# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionView::Helpers::AtomFeedHelper
  # Adds easy defaults to writing Atom feeds with the Builder template engine (this does not work on ERB or any other
  # template languages).
  #
  # Full usage example:
  #
  #   config/routes.rb:
  #     Rails.application.routes.draw do
  #       resources :posts
  #       root to: "posts#index"
  #     end
  #
  #   app/controllers/posts_controller.rb:
  #     class PostsController < ApplicationController
  #       # GET /posts.html
  #       # GET /posts.atom
  #       def index
  #         @posts = Post.all
  #
  #         respond_to do |format|
  #           format.html
  #           format.atom
  #         end
  #       end
  #     end
  #
  #   app/views/posts/index.atom.builder:
  #     atom_feed do |feed|
  #       feed.title("My great blog!")
  #       feed.updated(@posts[0].created_at) if @posts.length > 0
  #
  #       @posts.each do |post|
  #         feed.entry(post) do |entry|
  #           entry.title(post.title)
  #           entry.content(post.body, type: 'html')
  #
  #           entry.author do |author|
  #             author.name("DHH")
  #           end
  #         end
  #       end
  #     end
  #
  # The options for atom_feed are:
  #
  # * <tt>:language</tt>: Defaults to "en-US".
  # * <tt>:root_url</tt>: The HTML alternative that this feed is doubling for. Defaults to / on the current host.
  # * <tt>:url</tt>: The URL for this feed. Defaults to the current URL.
  # * <tt>:id</tt>: The id for this feed. Defaults to "tag:localhost,2005:/posts", in this case.
  # * <tt>:schema_date</tt>: The date at which the tag scheme for the feed was first used. A good default is the year you
  #   created the feed. See http://feedvalidator.org/docs/error/InvalidTAG.html for more information. If not specified,
  #   2005 is used (as an "I don't care" value).
  # * <tt>:instruct</tt>: Hash of XML processing instructions in the form {target => {attribute => value, }} or {target => [{attribute => value, }, ]}
  #
  # Other namespaces can be added to the root element:
  #
  #   app/views/posts/index.atom.builder:
  #     atom_feed({'xmlns:app' => 'http://www.w3.org/2007/app',
  #         'xmlns:openSearch' => 'http://a9.com/-/spec/opensearch/1.1/'}) do |feed|
  #       feed.title("My great blog!")
  #       feed.updated((@posts.first.created_at))
  #       feed.tag!('openSearch:totalResults', 10)
  #
  #       @posts.each do |post|
  #         feed.entry(post) do |entry|
  #           entry.title(post.title)
  #           entry.content(post.body, type: 'html')
  #           entry.tag!('app:edited', Time.now)
  #
  #           entry.author do |author|
  #             author.name("DHH")
  #           end
  #         end
  #       end
  #     end
  #
  # The Atom spec defines five elements (content rights title subtitle
  # summary) which may directly contain xhtml content if type: 'xhtml'
  # is specified as an attribute. If so, this helper will take care of
  # the enclosing div and xhtml namespace declaration. Example usage:
  #
  #    entry.summary type: 'xhtml' do |xhtml|
  #      xhtml.p pluralize(order.line_items.count, "line item")
  #      xhtml.p "Shipped to #{order.address}"
  #      xhtml.p "Paid by #{order.pay_type}"
  #    end
  #
  #
  # <tt>atom_feed</tt> yields an +AtomFeedBuilder+ instance. Nested elements yield
  # an +AtomBuilder+ instance.
  def atom_feed: (?::Hash[untyped, untyped] options) { (untyped) -> untyped } -> untyped
end
