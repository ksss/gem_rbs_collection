# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionView::Helpers::JavaScriptHelper
  # Escapes carriage returns and single and double quotes for JavaScript segments.
  #
  # Also available through the alias j(). This is particularly helpful in JavaScript
  # responses, like:
  #
  #   $('some_element').replaceWith('<%= j render 'some/element_template' %>');
  def escape_javascript: (untyped javascript) -> untyped
  alias j escape_javascript
  # Returns a JavaScript tag with the +content+ inside. Example:
  #   javascript_tag "alert('All is good')"
  #
  # Returns:
  #   <script>
  #   //<![CDATA[
  #   alert('All is good')
  #   //]]>
  #   </script>
  #
  # +html_options+ may be a hash of attributes for the <tt>\<script></tt>
  # tag.
  #
  #   javascript_tag "alert('All is good')", type: 'application/javascript'
  #
  # Returns:
  #   <script type="application/javascript">
  #   //<![CDATA[
  #   alert('All is good')
  #   //]]>
  #   </script>
  #
  # Instead of passing the content as an argument, you can also use a block
  # in which case, you pass your +html_options+ as the first parameter.
  #
  #   <%= javascript_tag type: 'application/javascript' do -%>
  #     alert('All is good')
  #   <% end -%>
  #
  # If you have a content security policy enabled then you can add an automatic
  # nonce value by passing <tt>nonce: true</tt> as part of +html_options+. Example:
  #
  #   <%= javascript_tag nonce: true do -%>
  #     alert('All is good')
  #   <% end -%>
  def javascript_tag: (?untyped? content_or_options_with_block, ?::Hash[untyped, untyped] html_options) ?{ () -> untyped } -> untyped
  def javascript_cdata_section: (untyped content) -> untyped
  JS_ESCAPE_MAP: Hash[String, String]
end
