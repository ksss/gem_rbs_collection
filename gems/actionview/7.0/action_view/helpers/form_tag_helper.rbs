# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionView::Helpers::FormTagHelper
  # Starts a form tag that points the action to a URL configured with <tt>url_for_options</tt> just like
  # ActionController::Base#url_for. The method for the form defaults to POST.
  #
  # ==== Options
  # * <tt>:multipart</tt> - If set to true, the enctype is set to "multipart/form-data".
  # * <tt>:method</tt> - The method to use when submitting the form, usually either "get" or "post".
  #   If "patch", "put", "delete", or another verb is used, a hidden input with name <tt>_method</tt>
  #   is added to simulate the verb over post.
  # * <tt>:authenticity_token</tt> - Authenticity token to use in the form. Use only if you need to
  #   pass custom authenticity token string, or to not add authenticity_token field at all
  #   (by passing <tt>false</tt>).  Remote forms may omit the embedded authenticity token
  #   by setting <tt>config.action_view.embed_authenticity_token_in_remote_forms = false</tt>.
  #   This is helpful when you're fragment-caching the form. Remote forms get the
  #   authenticity token from the <tt>meta</tt> tag, so embedding is unnecessary unless you
  #   support browsers without JavaScript.
  # * <tt>:remote</tt> - If set to true, will allow the Unobtrusive JavaScript drivers to control the
  #   submit behavior. By default this behavior is an ajax submit.
  # * <tt>:enforce_utf8</tt> - If set to false, a hidden input with name utf8 is not output.
  # * Any other key creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   form_tag('/posts')
  #   # => <form action="/posts" method="post">
  #
  #   form_tag('/posts/1', method: :put)
  #   # => <form action="/posts/1" method="post"> ... <input name="_method" type="hidden" value="put" /> ...
  #
  #   form_tag('/upload', multipart: true)
  #   # => <form action="/upload" method="post" enctype="multipart/form-data">
  #
  #   <%= form_tag('/posts') do -%>
  #     <div><%= submit_tag 'Save' %></div>
  #   <% end -%>
  #   # => <form action="/posts" method="post"><div><input type="submit" name="commit" value="Save" /></div></form>
  #
  #   <%= form_tag('/posts', remote: true) %>
  #   # => <form action="/posts" method="post" data-remote="true">
  #
  #   form_tag(false, method: :get)
  #   # => <form method="get">
  #
  #   form_tag('http://far.away.com/form', authenticity_token: false)
  #   # form without authenticity token
  #
  #   form_tag('http://far.away.com/form', authenticity_token: "cf50faa3fe97702ca1ae")
  #   # form with custom authenticity token
  #
  def form_tag: (?::Hash[untyped, untyped] url_for_options, ?::Hash[untyped, untyped] options) ?{ () -> untyped } -> untyped
  # Generate an HTML <tt>id</tt> attribute value for the given name and
  # field combination
  #
  # Return the value generated by the <tt>FormBuilder</tt> for the given
  # attribute name.
  #
  #   <%= label_tag :post, :title %>
  #   <%= text_field_tag :post, :title, aria: { describedby: field_id(:post, :title, :error) } %>
  #   <%= tag.span("is blank", id: field_id(:post, :title, :error) %>
  #
  # In the example above, the <tt><input type="text"></tt> element built by
  # the call to <tt>text_field_tag</tt> declares an
  # <tt>aria-describedby</tt> attribute referencing the <tt><span></tt>
  # element, sharing a common <tt>id</tt> root (<tt>post_title</tt>, in this
  # case).
  def field_id: (untyped object_name, untyped method_name, *untyped suffixes, ?index: untyped?, ?namespace: untyped?) -> untyped
  # Generate an HTML <tt>name</tt> attribute value for the given name and
  # field combination
  #
  # Return the value generated by the <tt>FormBuilder</tt> for the given
  # attribute name.
  #
  #   <%= text_field_tag :post, :title, name: field_name(:post, :title, :subtitle) %>
  #   <%# => <input type="text" name="post[title][subtitle]">
  #
  #   <%= text_field_tag :post, :tag, name: field_name(:post, :tag, multiple: true) %>
  #   <%# => <input type="text" name="post[tag][]">
  #
  def field_name: (untyped object_name, untyped method_name, *untyped method_names, ?multiple: bool, ?index: untyped?) -> untyped
  # Creates a dropdown selection box, or if the <tt>:multiple</tt> option is set to true, a multiple
  # choice selection box.
  #
  # Helpers::FormOptions can be used to create common select boxes such as countries, time zones, or
  # associated records. <tt>option_tags</tt> is a string containing the option tags for the select box.
  #
  # ==== Options
  # * <tt>:multiple</tt> - If set to true, the selection will allow multiple choices.
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * <tt>:include_blank</tt> - If set to true, an empty option will be created. If set to a string, the string will be used as the option's content and the value will be empty.
  # * <tt>:prompt</tt> - Create a prompt option with blank value and the text asking user to select something.
  # * Any other key creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   select_tag "people", options_from_collection_for_select(@people, "id", "name")
  #   # <select id="people" name="people"><option value="1">David</option></select>
  #
  #   select_tag "people", options_from_collection_for_select(@people, "id", "name", "1")
  #   # <select id="people" name="people"><option value="1" selected="selected">David</option></select>
  #
  #   select_tag "people", raw("<option>David</option>")
  #   # => <select id="people" name="people"><option>David</option></select>
  #
  #   select_tag "count", raw("<option>1</option><option>2</option><option>3</option><option>4</option>")
  #   # => <select id="count" name="count"><option>1</option><option>2</option>
  #   #    <option>3</option><option>4</option></select>
  #
  #   select_tag "colors", raw("<option>Red</option><option>Green</option><option>Blue</option>"), multiple: true
  #   # => <select id="colors" multiple="multiple" name="colors[]"><option>Red</option>
  #   #    <option>Green</option><option>Blue</option></select>
  #
  #   select_tag "locations", raw("<option>Home</option><option selected='selected'>Work</option><option>Out</option>")
  #   # => <select id="locations" name="locations"><option>Home</option><option selected='selected'>Work</option>
  #   #    <option>Out</option></select>
  #
  #   select_tag "access", raw("<option>Read</option><option>Write</option>"), multiple: true, class: 'form_input', id: 'unique_id'
  #   # => <select class="form_input" id="unique_id" multiple="multiple" name="access[]"><option>Read</option>
  #   #    <option>Write</option></select>
  #
  #   select_tag "people", options_from_collection_for_select(@people, "id", "name"), include_blank: true
  #   # => <select id="people" name="people"><option value="" label=" "></option><option value="1">David</option></select>
  #
  #   select_tag "people", options_from_collection_for_select(@people, "id", "name"), include_blank: "All"
  #   # => <select id="people" name="people"><option value="">All</option><option value="1">David</option></select>
  #
  #   select_tag "people", options_from_collection_for_select(@people, "id", "name"), prompt: "Select something"
  #   # => <select id="people" name="people"><option value="">Select something</option><option value="1">David</option></select>
  #
  #   select_tag "destination", raw("<option>NYC</option><option>Paris</option><option>Rome</option>"), disabled: true
  #   # => <select disabled="disabled" id="destination" name="destination"><option>NYC</option>
  #   #    <option>Paris</option><option>Rome</option></select>
  #
  #   select_tag "credit_card", options_for_select([ "VISA", "MasterCard" ], "MasterCard")
  #   # => <select id="credit_card" name="credit_card"><option>VISA</option>
  #   #    <option selected="selected">MasterCard</option></select>
  def select_tag: (untyped name, ?untyped? option_tags, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a standard text field; use these text fields to input smaller chunks of text like a username
  # or a search query.
  #
  # ==== Options
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * <tt>:size</tt> - The number of visible characters that will fit in the input.
  # * <tt>:maxlength</tt> - The maximum number of characters that the browser will allow the user to enter.
  # * <tt>:placeholder</tt> - The text contained in the field by default which is removed when the field receives focus.
  #   If set to true, use the translation found in the current I18n locale
  #   (through helpers.placeholder.<modelname>.<attribute>).
  # * Any other key creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   text_field_tag 'name'
  #   # => <input id="name" name="name" type="text" />
  #
  #   text_field_tag 'query', 'Enter your search query here'
  #   # => <input id="query" name="query" type="text" value="Enter your search query here" />
  #
  #   text_field_tag 'search', nil, placeholder: 'Enter search term...'
  #   # => <input id="search" name="search" placeholder="Enter search term..." type="text" />
  #
  #   text_field_tag 'request', nil, class: 'special_input'
  #   # => <input class="special_input" id="request" name="request" type="text" />
  #
  #   text_field_tag 'address', '', size: 75
  #   # => <input id="address" name="address" size="75" type="text" value="" />
  #
  #   text_field_tag 'zip', nil, maxlength: 5
  #   # => <input id="zip" maxlength="5" name="zip" type="text" />
  #
  #   text_field_tag 'payment_amount', '$0.00', disabled: true
  #   # => <input disabled="disabled" id="payment_amount" name="payment_amount" type="text" value="$0.00" />
  #
  #   text_field_tag 'ip', '0.0.0.0', maxlength: 15, size: 20, class: "ip-input"
  #   # => <input class="ip-input" id="ip" maxlength="15" name="ip" size="20" type="text" value="0.0.0.0" />
  def text_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a label element. Accepts a block.
  #
  # ==== Options
  # * Creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   label_tag 'name'
  #   # => <label for="name">Name</label>
  #
  #   label_tag 'name', 'Your name'
  #   # => <label for="name">Your name</label>
  #
  #   label_tag 'name', nil, class: 'small_label'
  #   # => <label for="name" class="small_label">Name</label>
  def label_tag: (?untyped? name, ?untyped? content_or_options, ?untyped? options) ?{ () -> untyped } -> untyped
  # Creates a hidden form input field used to transmit data that would be lost due to HTTP's statelessness or
  # data that should be hidden from the user.
  #
  # ==== Options
  # * Creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   hidden_field_tag 'tags_list'
  #   # => <input type="hidden" name="tags_list" id="tags_list" autocomplete="off" />
  #
  #   hidden_field_tag 'token', 'VUBJKB23UIVI1UU1VOBVI@'
  #   # => <input type="hidden" name="token" id="token" value="VUBJKB23UIVI1UU1VOBVI@" autocomplete="off" />
  #
  #   hidden_field_tag 'collected_input', '', onchange: "alert('Input collected!')"
  #   # => <input type="hidden" name="collected_input" id="collected_input"
  #        value="" onchange="alert(&#39;Input collected!&#39;)" autocomplete="off" />
  def hidden_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a file upload field. If you are using file uploads then you will also need
  # to set the multipart option for the form tag:
  #
  #   <%= form_tag '/upload', multipart: true do %>
  #     <label for="file">File to Upload</label> <%= file_field_tag "file" %>
  #     <%= submit_tag %>
  #   <% end %>
  #
  # The specified URL will then be passed a File object containing the selected file, or if the field
  # was left blank, a StringIO object.
  #
  # ==== Options
  # * Creates standard HTML attributes for the tag.
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * <tt>:multiple</tt> - If set to true, *in most updated browsers* the user will be allowed to select multiple files.
  # * <tt>:accept</tt> - If set to one or multiple mime-types, the user will be suggested a filter when choosing a file. You still need to set up model validations.
  #
  # ==== Examples
  #   file_field_tag 'attachment'
  #   # => <input id="attachment" name="attachment" type="file" />
  #
  #   file_field_tag 'avatar', class: 'profile_input'
  #   # => <input class="profile_input" id="avatar" name="avatar" type="file" />
  #
  #   file_field_tag 'picture', disabled: true
  #   # => <input disabled="disabled" id="picture" name="picture" type="file" />
  #
  #   file_field_tag 'resume', value: '~/resume.doc'
  #   # => <input id="resume" name="resume" type="file" value="~/resume.doc" />
  #
  #   file_field_tag 'user_pic', accept: 'image/png,image/gif,image/jpeg'
  #   # => <input accept="image/png,image/gif,image/jpeg" id="user_pic" name="user_pic" type="file" />
  #
  #   file_field_tag 'file', accept: 'text/html', class: 'upload', value: 'index.html'
  #   # => <input accept="text/html" class="upload" id="file" name="file" type="file" value="index.html" />
  def file_field_tag: (untyped name, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a password field, a masked text field that will hide the users input behind a mask character.
  #
  # ==== Options
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * <tt>:size</tt> - The number of visible characters that will fit in the input.
  # * <tt>:maxlength</tt> - The maximum number of characters that the browser will allow the user to enter.
  # * Any other key creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   password_field_tag 'pass'
  #   # => <input id="pass" name="pass" type="password" />
  #
  #   password_field_tag 'secret', 'Your secret here'
  #   # => <input id="secret" name="secret" type="password" value="Your secret here" />
  #
  #   password_field_tag 'masked', nil, class: 'masked_input_field'
  #   # => <input class="masked_input_field" id="masked" name="masked" type="password" />
  #
  #   password_field_tag 'token', '', size: 15
  #   # => <input id="token" name="token" size="15" type="password" value="" />
  #
  #   password_field_tag 'key', nil, maxlength: 16
  #   # => <input id="key" maxlength="16" name="key" type="password" />
  #
  #   password_field_tag 'confirm_pass', nil, disabled: true
  #   # => <input disabled="disabled" id="confirm_pass" name="confirm_pass" type="password" />
  #
  #   password_field_tag 'pin', '1234', maxlength: 4, size: 6, class: "pin_input"
  #   # => <input class="pin_input" id="pin" maxlength="4" name="pin" size="6" type="password" value="1234" />
  def password_field_tag: (?::String name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text input area; use a textarea for longer text inputs such as blog posts or descriptions.
  #
  # ==== Options
  # * <tt>:size</tt> - A string specifying the dimensions (columns by rows) of the textarea (e.g., "25x10").
  # * <tt>:rows</tt> - Specify the number of rows in the textarea
  # * <tt>:cols</tt> - Specify the number of columns in the textarea
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * <tt>:escape</tt> - By default, the contents of the text input are HTML escaped.
  #   If you need unescaped contents, set this to false.
  # * Any other key creates standard HTML attributes for the tag.
  #
  # ==== Examples
  #   text_area_tag 'post'
  #   # => <textarea id="post" name="post"></textarea>
  #
  #   text_area_tag 'bio', @user.bio
  #   # => <textarea id="bio" name="bio">This is my biography.</textarea>
  #
  #   text_area_tag 'body', nil, rows: 10, cols: 25
  #   # => <textarea cols="25" id="body" name="body" rows="10"></textarea>
  #
  #   text_area_tag 'body', nil, size: "25x10"
  #   # => <textarea name="body" id="body" cols="25" rows="10"></textarea>
  #
  #   text_area_tag 'description', "Description goes here.", disabled: true
  #   # => <textarea disabled="disabled" id="description" name="description">Description goes here.</textarea>
  #
  #   text_area_tag 'comment', nil, class: 'comment_input'
  #   # => <textarea class="comment_input" id="comment" name="comment"></textarea>
  def text_area_tag: (untyped name, ?untyped? content, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a check box form input tag.
  #
  # ==== Options
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * Any other key creates standard HTML options for the tag.
  #
  # ==== Examples
  #   check_box_tag 'accept'
  #   # => <input id="accept" name="accept" type="checkbox" value="1" />
  #
  #   check_box_tag 'rock', 'rock music'
  #   # => <input id="rock" name="rock" type="checkbox" value="rock music" />
  #
  #   check_box_tag 'receive_email', 'yes', true
  #   # => <input checked="checked" id="receive_email" name="receive_email" type="checkbox" value="yes" />
  #
  #   check_box_tag 'tos', 'yes', false, class: 'accept_tos'
  #   # => <input class="accept_tos" id="tos" name="tos" type="checkbox" value="yes" />
  #
  #   check_box_tag 'eula', 'accepted', false, disabled: true
  #   # => <input disabled="disabled" id="eula" name="eula" type="checkbox" value="accepted" />
  def check_box_tag: (untyped name, ?::String value, ?bool checked, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a radio button; use groups of radio buttons named the same to allow users to
  # select from a group of options.
  #
  # ==== Options
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * Any other key creates standard HTML options for the tag.
  #
  # ==== Examples
  #   radio_button_tag 'favorite_color', 'maroon'
  #   # => <input id="favorite_color_maroon" name="favorite_color" type="radio" value="maroon" />
  #
  #   radio_button_tag 'receive_updates', 'no', true
  #   # => <input checked="checked" id="receive_updates_no" name="receive_updates" type="radio" value="no" />
  #
  #   radio_button_tag 'time_slot', "3:00 p.m.", false, disabled: true
  #   # => <input disabled="disabled" id="time_slot_3:00_p.m." name="time_slot" type="radio" value="3:00 p.m." />
  #
  #   radio_button_tag 'color', "green", true, class: "color_input"
  #   # => <input checked="checked" class="color_input" id="color_green" name="color" type="radio" value="green" />
  def radio_button_tag: (untyped name, untyped value, ?bool checked, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a submit button with the text <tt>value</tt> as the caption.
  #
  # ==== Options
  # * <tt>:data</tt> - This option can be used to add custom data attributes.
  # * <tt>:disabled</tt> - If true, the user will not be able to use this input.
  # * Any other key creates standard HTML options for the tag.
  #
  # ==== Examples
  #   submit_tag
  #   # => <input name="commit" data-disable-with="Save changes" type="submit" value="Save changes" />
  #
  #   submit_tag "Edit this article"
  #   # => <input name="commit" data-disable-with="Edit this article" type="submit" value="Edit this article" />
  #
  #   submit_tag "Save edits", disabled: true
  #   # => <input disabled="disabled" name="commit" data-disable-with="Save edits" type="submit" value="Save edits" />
  #
  #   submit_tag nil, class: "form_submit"
  #   # => <input class="form_submit" name="commit" type="submit" />
  #
  #   submit_tag "Edit", class: "edit_button"
  #   # => <input class="edit_button" data-disable-with="Edit" name="commit" type="submit" value="Edit" />
  #
  # ==== Deprecated: Rails UJS attributes
  #
  # Prior to Rails 7, Rails shipped with the JavaScript library called @rails/ujs on by default. Following Rails 7,
  # this library is no longer on by default. This library integrated with the following options:
  #
  # * <tt>confirm: 'question?'</tt> - If present the unobtrusive JavaScript
  #   drivers will provide a prompt with the question specified. If the user accepts,
  #   the form is processed normally, otherwise no action is taken.
  # * <tt>:disable_with</tt> - Value of this parameter will be used as the value for a
  #   disabled version of the submit button when the form is submitted. This feature is
  #   provided by the unobtrusive JavaScript driver. To disable this feature for a single submit tag
  #   pass <tt>:data => { disable_with: false }</tt> Defaults to value attribute.
  #
  #   submit_tag "Complete sale", data: { disable_with: "Submitting..." }
  #   # => <input name="commit" data-disable-with="Submitting..." type="submit" value="Complete sale" />
  #
  #   submit_tag "Save", data: { confirm: "Are you sure?" }
  #   # => <input name='commit' type='submit' value='Save' data-disable-with="Save" data-confirm="Are you sure?" />
  #
  def submit_tag: (?::String value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a button element that defines a <tt>submit</tt> button,
  # <tt>reset</tt> button or a generic button which can be used in
  # JavaScript, for example. You can use the button tag as a regular
  # submit tag but it isn't supported in legacy browsers. However,
  # the button tag does allow for richer labels such as images and emphasis,
  # so this helper will also accept a block. By default, it will create
  # a button tag with type <tt>submit</tt>, if type is not given.
  #
  # ==== Options
  # * <tt>:data</tt> - This option can be used to add custom data attributes.
  # * <tt>:disabled</tt> - If true, the user will not be able to
  #   use this input.
  # * Any other key creates standard HTML options for the tag.
  #
  # ==== Examples
  #   button_tag
  #   # => <button name="button" type="submit">Button</button>
  #
  #   button_tag 'Reset', type: 'reset'
  #   # => <button name="button" type="reset">Reset</button>
  #
  #   button_tag 'Button', type: 'button'
  #   # => <button name="button" type="button">Button</button>
  #
  #   button_tag 'Reset', type: 'reset', disabled: true
  #   # => <button name="button" type="reset" disabled="disabled">Reset</button>
  #
  #   button_tag(type: 'button') do
  #     content_tag(:strong, 'Ask me!')
  #   end
  #   # => <button name="button" type="button">
  #   #     <strong>Ask me!</strong>
  #   #    </button>
  #
  # ==== Deprecated: Rails UJS attributes
  #
  # Prior to Rails 7, Rails shipped with a JavaScript library called @rails/ujs on by default. Following Rails 7,
  # this library is no longer on by default. This library integrated with the following options:
  #
  # * <tt>confirm: 'question?'</tt> - If present, the
  #   unobtrusive JavaScript drivers will provide a prompt with
  #   the question specified. If the user accepts, the form is
  #   processed normally, otherwise no action is taken.
  # * <tt>:disable_with</tt> - Value of this parameter will be
  #   used as the value for a disabled version of the submit
  #   button when the form is submitted. This feature is provided
  #   by the unobtrusive JavaScript driver.
  #
  #   button_tag "Save", data: { confirm: "Are you sure?" }
  #   # => <button name="button" type="submit" data-confirm="Are you sure?">Save</button>
  #
  #   button_tag "Checkout", data: { disable_with: "Please wait..." }
  #   # => <button data-disable-with="Please wait..." name="button" type="submit">Checkout</button>
  #
  def button_tag: (?untyped? content_or_options, ?untyped? options) ?{ () -> untyped } -> untyped
  # Displays an image which when clicked will submit the form.
  #
  # <tt>source</tt> is passed to AssetTagHelper#path_to_image
  #
  # ==== Options
  # * <tt>:data</tt> - This option can be used to add custom data attributes.
  # * <tt>:disabled</tt> - If set to true, the user will not be able to use this input.
  # * Any other key creates standard HTML options for the tag.
  #
  # ==== Data attributes
  #
  # * <tt>confirm: 'question?'</tt> - This will add a JavaScript confirm
  #   prompt with the question specified. If the user accepts, the form is
  #   processed normally, otherwise no action is taken.
  #
  # ==== Examples
  #   image_submit_tag("login.png")
  #   # => <input src="/assets/login.png" type="image" />
  #
  #   image_submit_tag("purchase.png", disabled: true)
  #   # => <input disabled="disabled" src="/assets/purchase.png" type="image" />
  #
  #   image_submit_tag("search.png", class: 'search_button', alt: 'Find')
  #   # => <input class="search_button" src="/assets/search.png" type="image" />
  #
  #   image_submit_tag("agree.png", disabled: true, class: "agree_disagree_button")
  #   # => <input class="agree_disagree_button" disabled="disabled" src="/assets/agree.png" type="image" />
  #
  #   image_submit_tag("save.png", data: { confirm: "Are you sure?" })
  #   # => <input src="/assets/save.png" data-confirm="Are you sure?" type="image" />
  def image_submit_tag: (untyped source, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a field set for grouping HTML form elements.
  #
  # <tt>legend</tt> will become the fieldset's title (optional as per W3C).
  # <tt>options</tt> accept the same values as tag.
  #
  # ==== Examples
  #   <%= field_set_tag do %>
  #     <p><%= text_field_tag 'name' %></p>
  #   <% end %>
  #   # => <fieldset><p><input id="name" name="name" type="text" /></p></fieldset>
  #
  #   <%= field_set_tag 'Your details' do %>
  #     <p><%= text_field_tag 'name' %></p>
  #   <% end %>
  #   # => <fieldset><legend>Your details</legend><p><input id="name" name="name" type="text" /></p></fieldset>
  #
  #   <%= field_set_tag nil, class: 'format' do %>
  #     <p><%= text_field_tag 'name' %></p>
  #   <% end %>
  #   # => <fieldset class="format"><p><input id="name" name="name" type="text" /></p></fieldset>
  def field_set_tag: (?untyped? legend, ?untyped? options) ?{ () -> untyped } -> untyped
  # Creates a text field of type "color".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   color_field_tag 'name'
  #   # => <input id="name" name="name" type="color" />
  #
  #   color_field_tag 'color', '#DEF726'
  #   # => <input id="color" name="color" type="color" value="#DEF726" />
  #
  #   color_field_tag 'color', nil, class: 'special_input'
  #   # => <input class="special_input" id="color" name="color" type="color" />
  #
  #   color_field_tag 'color', '#DEF726', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="color" name="color" type="color" value="#DEF726" />
  def color_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "search".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   search_field_tag 'name'
  #   # => <input id="name" name="name" type="search" />
  #
  #   search_field_tag 'search', 'Enter your search query here'
  #   # => <input id="search" name="search" type="search" value="Enter your search query here" />
  #
  #   search_field_tag 'search', nil, class: 'special_input'
  #   # => <input class="special_input" id="search" name="search" type="search" />
  #
  #   search_field_tag 'search', 'Enter your search query here', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="search" name="search" type="search" value="Enter your search query here" />
  def search_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "tel".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   telephone_field_tag 'name'
  #   # => <input id="name" name="name" type="tel" />
  #
  #   telephone_field_tag 'tel', '0123456789'
  #   # => <input id="tel" name="tel" type="tel" value="0123456789" />
  #
  #   telephone_field_tag 'tel', nil, class: 'special_input'
  #   # => <input class="special_input" id="tel" name="tel" type="tel" />
  #
  #   telephone_field_tag 'tel', '0123456789', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="tel" name="tel" type="tel" value="0123456789" />
  def telephone_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  alias phone_field_tag telephone_field_tag
  # Creates a text field of type "date".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   date_field_tag 'name'
  #   # => <input id="name" name="name" type="date" />
  #
  #   date_field_tag 'date', '01/01/2014'
  #   # => <input id="date" name="date" type="date" value="01/01/2014" />
  #
  #   date_field_tag 'date', nil, class: 'special_input'
  #   # => <input class="special_input" id="date" name="date" type="date" />
  #
  #   date_field_tag 'date', '01/01/2014', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="date" name="date" type="date" value="01/01/2014" />
  def date_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "time".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag. Additionally, supports:
  #
  # * <tt>:min</tt> - The minimum acceptable value.
  # * <tt>:max</tt> - The maximum acceptable value.
  # * <tt>:step</tt> - The acceptable value granularity.
  # * <tt>:include_seconds</tt> - Include seconds and ms in the output timestamp format (true by default).
  def time_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "datetime-local".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag. Additionally, supports:
  #
  # * <tt>:min</tt> - The minimum acceptable value.
  # * <tt>:max</tt> - The maximum acceptable value.
  # * <tt>:step</tt> - The acceptable value granularity.
  def datetime_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  alias datetime_local_field_tag datetime_field_tag
  # Creates a text field of type "month".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag. Additionally, supports:
  #
  # * <tt>:min</tt> - The minimum acceptable value.
  # * <tt>:max</tt> - The maximum acceptable value.
  # * <tt>:step</tt> - The acceptable value granularity.
  def month_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "week".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag. Additionally, supports:
  #
  # * <tt>:min</tt> - The minimum acceptable value.
  # * <tt>:max</tt> - The maximum acceptable value.
  # * <tt>:step</tt> - The acceptable value granularity.
  def week_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "url".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   url_field_tag 'name'
  #   # => <input id="name" name="name" type="url" />
  #
  #   url_field_tag 'url', 'http://rubyonrails.org'
  #   # => <input id="url" name="url" type="url" value="http://rubyonrails.org" />
  #
  #   url_field_tag 'url', nil, class: 'special_input'
  #   # => <input class="special_input" id="url" name="url" type="url" />
  #
  #   url_field_tag 'url', 'http://rubyonrails.org', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="url" name="url" type="url" value="http://rubyonrails.org" />
  def url_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a text field of type "email".
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag.
  #
  # ==== Examples
  #
  #   email_field_tag 'name'
  #   # => <input id="name" name="name" type="email" />
  #
  #   email_field_tag 'email', 'email@example.com'
  #   # => <input id="email" name="email" type="email" value="email@example.com" />
  #
  #   email_field_tag 'email', nil, class: 'special_input'
  #   # => <input class="special_input" id="email" name="email" type="email" />
  #
  #   email_field_tag 'email', 'email@example.com', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="email" name="email" type="email" value="email@example.com" />
  def email_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a number field.
  #
  # ==== Options
  #
  # Supports the same options as #text_field_tag. Additionally, supports:
  #
  # * <tt>:min</tt> - The minimum acceptable value.
  # * <tt>:max</tt> - The maximum acceptable value.
  # * <tt>:in</tt> - A range specifying the <tt>:min</tt> and
  #   <tt>:max</tt> values.
  # * <tt>:within</tt> - Same as <tt>:in</tt>.
  # * <tt>:step</tt> - The acceptable value granularity.
  #
  # ==== Examples
  #
  #   number_field_tag 'quantity'
  #   # => <input id="quantity" name="quantity" type="number" />
  #
  #   number_field_tag 'quantity', '1'
  #   # => <input id="quantity" name="quantity" type="number" value="1" />
  #
  #   number_field_tag 'quantity', nil, class: 'special_input'
  #   # => <input class="special_input" id="quantity" name="quantity" type="number" />
  #
  #   number_field_tag 'quantity', nil, min: 1
  #   # => <input id="quantity" name="quantity" min="1" type="number" />
  #
  #   number_field_tag 'quantity', nil, max: 9
  #   # => <input id="quantity" name="quantity" max="9" type="number" />
  #
  #   number_field_tag 'quantity', nil, in: 1...10
  #   # => <input id="quantity" name="quantity" min="1" max="9" type="number" />
  #
  #   number_field_tag 'quantity', nil, within: 1...10
  #   # => <input id="quantity" name="quantity" min="1" max="9" type="number" />
  #
  #   number_field_tag 'quantity', nil, min: 1, max: 10
  #   # => <input id="quantity" name="quantity" min="1" max="10" type="number" />
  #
  #   number_field_tag 'quantity', nil, min: 1, max: 10, step: 2
  #   # => <input id="quantity" name="quantity" min="1" max="10" step="2" type="number" />
  #
  #   number_field_tag 'quantity', '1', class: 'special_input', disabled: true
  #   # => <input disabled="disabled" class="special_input" id="quantity" name="quantity" type="number" value="1" />
  def number_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates a range form element.
  #
  # ==== Options
  #
  # Supports the same options as #number_field_tag.
  def range_field_tag: (untyped name, ?untyped? value, ?::Hash[untyped, untyped] options) -> untyped
  # Creates the hidden UTF-8 enforcer tag. Override this method in a helper
  # to customize the tag.
  def utf8_enforcer_tag: () -> untyped
  private def html_options_for_form: (untyped url_for_options, untyped options) -> untyped
  private def extra_tags_for_form: (untyped html_options) -> untyped
  private def form_tag_html: (untyped html_options) -> untyped
  private def form_tag_with_body: (untyped html_options, untyped content) -> untyped
  # see http://www.w3.org/TR/html4/types.html#type-name
  private def sanitize_to_id: (untyped name) -> untyped
  private def set_default_disable_with: (untyped value, untyped tag_options) -> untyped
  private def convert_direct_upload_option_to_url: (untyped options) -> untyped
  include ActionView::Helpers::UrlHelper
  include ActionView::Helpers::TextHelper
  extend ActiveSupport::Concern
  def self.embed_authenticity_token_in_remote_forms: () -> untyped
  def embed_authenticity_token_in_remote_forms: () -> untyped
  def self.default_enforce_utf8: () -> untyped
  def default_enforce_utf8: () -> untyped
  def self.embed_authenticity_token_in_remote_forms=: (untyped val) -> untyped
  def embed_authenticity_token_in_remote_forms=: (untyped val) -> untyped
  def self.default_enforce_utf8=: (untyped val) -> untyped
  def default_enforce_utf8=: (untyped val) -> untyped
end
