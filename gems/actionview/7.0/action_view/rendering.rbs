# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActionView::Rendering
  def initialize: () -> void
  # Override process to set up I18n proxy.
  def process: (*untyped) ?{ () -> untyped } -> untyped
  def view_context_class: () -> untyped
  # An instance of a view class. The default view class is ActionView::Base.
  #
  # The view class must have the following methods:
  #
  # * <tt>View.new(lookup_context, assigns, controller)</tt> — Create a new
  #   ActionView instance for a controller and we can also pass the arguments.
  #
  # * <tt>View#render(option)</tt> — Returns String with the rendered template.
  #
  # Override this method in a module to change the default behavior.
  def view_context: () -> untyped
  # Returns an object that is able to render templates.
  def view_renderer: () -> untyped
  def render_to_body: (?::Hash[untyped, untyped] options) -> untyped
  # Find and render a template based on the options given.
  private def _render_template: (untyped options) -> untyped
  # Assign the rendered format to look up context.
  private def _process_format: (untyped format) -> untyped
  # Normalize args by converting render "foo" to render :action => "foo" and
  # render "foo/bar" to render :template => "foo/bar".
  private def _normalize_args: (?untyped? action, ?::Hash[untyped, untyped] options) -> untyped
  # Normalize options.
  private def _normalize_options: (untyped options) -> untyped
  include ActionView::ViewPaths
  extend ActiveSupport::Concern
  attr_reader rendered_format: untyped
end
