# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveJob::QueueAdapters::AsyncAdapter
  # See {Concurrent::ThreadPoolExecutor}[https://ruby-concurrency.github.io/concurrent-ruby/Concurrent/ThreadPoolExecutor.html] for executor options.
  def initialize: (**untyped executor_options) -> void
  def enqueue: (untyped job) -> untyped
  def enqueue_at: (untyped job, untyped timestamp) -> untyped
  # Gracefully stop processing jobs. Finishes in-progress work and handles
  # any new jobs following the executor's fallback policy (`caller_runs`).
  # Waits for termination by default. Pass `wait: false` to continue.
  def shutdown: (?wait: bool) -> untyped
  # Used for our test suite.
  def immediate=: (untyped immediate) -> untyped
end
