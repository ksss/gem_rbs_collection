# !!! GENERATED CODE !!!
# Please see generators/rails-generator

interface _ActiveRecord_Relation[Model, PrimaryKey]
  def all: () -> self

  def ids: () -> Array[PrimaryKey]

  def none: () -> self

  def pluck: (Symbol | String column) -> Array[untyped]
           | (*Symbol | String columns) -> Array[Array[untyped]]

  def where: (*untyped) -> self

  def not: (*untyped) -> self

  def exists?: (*untyped) -> bool

  def order: (*untyped) -> self

  def group: (*Symbol | String) -> untyped

  def distinct: () -> self

  def or: (self) -> self

  def merge: (self) -> self

  def joins: (*String | Symbol) -> self
           | (Hash[untyped, untyped]) -> self

  def left_joins: (*String | Symbol) -> self
                | (Hash[untyped, untyped]) -> self

  def left_outer_joins: (*String | Symbol) -> self
                      | (Hash[untyped, untyped]) -> self

  def includes: (*String | Symbol) -> self
              | (Hash[untyped, untyped]) -> self

  def eager_load: (*String | Symbol) -> self
                | (Hash[untyped, untyped]) -> self

  def preload: (*String | Symbol) -> self
             | (Hash[untyped, untyped]) -> self

  def find_by: (*untyped) -> Model?

  def find_by!: (*untyped) -> Model

  def find: (PrimaryKey id) -> Model
          | (Array[PrimaryKey]) -> Array[Model]
          | (*PrimaryKey) -> Array[Model]
          | () { (Model) -> boolish } -> Model?

  def first: () -> Model?
           | (Integer count) -> Array[Model]

  def first!: () -> Model

  def last: () -> Model?
          | (Integer count) -> Array[Model]

  def last!: () -> Model

  def limit: (Integer | Arel::Nodes::SqlLiteral | nil) -> self

  def limit!: (Integer | Arel::Nodes::SqlLiteral | nil) -> self

  def find_each: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (Model) -> void } -> nil

  def find_in_batches: (?batch_size: Integer, ?start: Integer, ?finish: Integer, ?error_on_ignore: bool) { (self) -> void } -> nil

  def destroy_all: () -> untyped

  def delete_all: () -> untyped

  def update_all: (*untyped) -> untyped

  def each: () { (Model) -> void } -> self

  def select: (*Symbol | String) -> self
            | () { (Model) -> boolish } -> Array[Model]
end
