# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveRecord::Associations::Preloader
  # Eager loads the named associations for the given Active Record record(s).
  #
  # In this description, 'association name' shall refer to the name passed
  # to an association creation method. For example, a model that specifies
  # <tt>belongs_to :author</tt>, <tt>has_many :buyers</tt> has association
  # names +:author+ and +:buyers+.
  #
  # == Parameters
  # +records+ is an array of ActiveRecord::Base. This array needs not be flat,
  # i.e. +records+ itself may also contain arrays of records. In any case,
  # +preload_associations+ will preload the all associations records by
  # flattening +records+.
  #
  # +associations+ specifies one or more associations that you want to
  # preload. It may be:
  # - a Symbol or a String which specifies a single association name. For
  #   example, specifying +:books+ allows this method to preload all books
  #   for an Author.
  # - an Array which specifies multiple association names. This array
  #   is processed recursively. For example, specifying <tt>[:avatar, :books]</tt>
  #   allows this method to preload an author's avatar as well as all of his
  #   books.
  # - a Hash which specifies multiple association names, as well as
  #   association names for the to-be-preloaded association objects. For
  #   example, specifying <tt>{ author: :avatar }</tt> will preload a
  #   book's author, as well as that author's avatar.
  #
  # +:associations+ has the same format as the +:include+ option for
  # <tt>ActiveRecord::Base.find</tt>. So +associations+ could look like this:
  #
  #   :books
  #   [ :books, :author ]
  #   { author: :avatar }
  #   [ :books, { author: :avatar } ]
  def preload: (untyped records, untyped associations, ?untyped? preload_scope) -> untyped
  # Loads all the given data into +records+ for the +association+.
  private def preloaders_on: (untyped association, untyped records, untyped scope) -> untyped
  private def preloaders_for_hash: (untyped association, untyped records, untyped scope) -> untyped
  # Loads all the given data into +records+ for a singular +association+.
  #
  # Functions by instantiating a preloader class such as Preloader::HasManyThrough and
  # call the +run+ method for each passed in class in the +records+ argument.
  #
  # Not all records have the same class, so group then preload group on the reflection
  # itself so that if various subclass share the same association then we do not split
  # them unnecessarily
  #
  # Additionally, polymorphic belongs_to associations can have multiple associated
  # classes, depending on the polymorphic_type field. So we group by the classes as
  # well.
  private def preloaders_for_one: (untyped association, untyped records, untyped scope) -> untyped
  private def grouped_records: (untyped association, untyped records) -> untyped
  # Returns a class containing the logic needed to load preload the data
  # and attach it to a relation. The class returned implements a `run` method
  # that accepts a preloader.
  private def preloader_for: (untyped reflection, untyped owners) -> untyped
  extend ActiveSupport::Autoload
end
