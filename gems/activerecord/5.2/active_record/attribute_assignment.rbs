# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::AttributeAssignment
  private def _assign_attributes: (untyped attributes) -> untyped

  # Assign any deferred nested attributes after the base attributes have been set.
  private def assign_nested_parameter_attributes: (untyped pairs) -> untyped

  # Instantiates objects for all attribute classes that needs more than one constructor parameter. This is done
  # by calling new on the column type or aggregation type (through composed_of) object with these parameters.
  # So having the pairs written_on(1) = "2004", written_on(2) = "6", written_on(3) = "24", will instantiate
  # written_on (a date type) with Date.new("2004", "6", "24"). You can also specify a typecast character in the
  # parentheses to have the parameters typecasted before they're used in the constructor. Use i for Integer and
  # f for Float. If all the values for a given attribute are empty, the attribute will be set to +nil+.
  private def assign_multiparameter_attributes: (untyped pairs) -> untyped

  private def execute_callstack_for_multiparameter_attributes: (untyped callstack) -> untyped

  private def extract_callstack_for_multiparameter_attributes: (untyped pairs) -> untyped

  private def type_cast_attribute_value: (untyped multiparameter_name, untyped value) -> untyped

  private def find_parameter_position: (untyped multiparameter_name) -> untyped

  include ActiveModel::AttributeAssignment

  extend ActiveSupport::Concern
end
