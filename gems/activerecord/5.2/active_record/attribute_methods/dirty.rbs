# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::AttributeMethods::Dirty
  # <tt>reload</tt> the record and clears changed attributes.
  def reload: () -> untyped

  # Did this attribute change when we last saved? This method can be invoked
  # as +saved_change_to_name?+ instead of <tt>saved_change_to_attribute?("name")</tt>.
  # Behaves similarly to +attribute_changed?+. This method is useful in
  # after callbacks to determine if the call to save changed a certain
  # attribute.
  #
  # ==== Options
  #
  # +from+ When passed, this method will return false unless the original
  # value is equal to the given option
  #
  # +to+ When passed, this method will return false unless the value was
  # changed to the given value
  def saved_change_to_attribute?: (untyped attr_name, **untyped options) -> untyped

  # Returns the change to an attribute during the last save. If the
  # attribute was changed, the result will be an array containing the
  # original value and the saved value.
  #
  # Behaves similarly to +attribute_change+. This method is useful in after
  # callbacks, to see the change in an attribute that just occurred
  #
  # This method can be invoked as +saved_change_to_name+ in instead of
  # <tt>saved_change_to_attribute("name")</tt>
  def saved_change_to_attribute: (untyped attr_name) -> untyped

  # Returns the original value of an attribute before the last save.
  # Behaves similarly to +attribute_was+. This method is useful in after
  # callbacks to get the original value of an attribute before the save that
  # just occurred
  def attribute_before_last_save: (untyped attr_name) -> untyped

  # Did the last call to +save+ have any changes to change?
  def saved_changes?: () -> untyped

  # Returns a hash containing all the changes that were just saved.
  def saved_changes: () -> untyped

  # Alias for +attribute_changed?+
  def will_save_change_to_attribute?: (untyped attr_name, **untyped options) -> untyped

  # Alias for +attribute_change+
  def attribute_change_to_be_saved: (untyped attr_name) -> untyped

  # Alias for +attribute_was+
  def attribute_in_database: (untyped attr_name) -> untyped

  # Alias for +changed?+
  def has_changes_to_save?: () -> untyped

  # Alias for +changes+
  def changes_to_save: () -> untyped

  # Alias for +changed+
  def changed_attribute_names_to_save: () -> untyped

  # Alias for +changed_attributes+
  def attributes_in_database: () -> untyped

  private def write_attribute_without_type_cast: (untyped attr_name, untyped value) -> untyped

  private def _update_record: () -> untyped

  private def _create_record: () -> untyped

  private def keys_for_partial_write: () -> untyped

  include ActiveModel::Dirty

  extend ActiveSupport::Concern
end
