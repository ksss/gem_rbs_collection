# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveRecord::FixtureSet
  def self.default_fixture_model_name: (untyped fixture_set_name, ?untyped config) -> untyped
  def self.default_fixture_table_name: (untyped fixture_set_name, ?untyped config) -> untyped
  def self.reset_cache: () -> untyped
  def self.cache_for_connection: (untyped connection) -> untyped
  def self.fixture_is_cached?: (untyped connection, untyped table_name) -> untyped
  def self.cached_fixtures: (untyped connection, ?untyped? keys_to_fetch) -> untyped
  def self.cache_fixtures: (untyped connection, untyped fixtures_map) -> untyped
  def self.instantiate_fixtures: (untyped object, untyped fixture_set, ?bool load_instances) -> (untyped | nil)
  def self.instantiate_all_loaded_fixtures: (untyped object, ?bool load_instances) -> untyped
  def self.create_fixtures: (untyped fixtures_directory, untyped fixture_set_names, ?::Hash[untyped, untyped] class_names, ?untyped config) { () -> untyped } -> untyped
  # Returns a consistent, platform-independent identifier for +label+.
  # Integer identifiers are values less than 2^30. UUIDs are RFC 4122 version 5 SHA-1 hashes.
  def self.identify: (untyped label, ?::Symbol column_type) -> untyped
  # Superclass for the evaluation contexts used by ERB fixtures.
  def self.context_class: () -> untyped
  def self.update_all_loaded_fixtures: (untyped fixtures_map) -> untyped
  def initialize: (untyped connection, untyped name, untyped class_name, untyped path, ?untyped config) -> void
  def []: (untyped x) -> untyped
  def []=: (untyped k, untyped v) -> untyped
  def each: () ?{ () -> untyped } -> untyped
  def size: () -> untyped
  # Returns a hash of rows to be inserted. The key is the table, the value is
  # a list of rows to insert to that table.
  def table_rows: () -> untyped
  private def primary_key_name: () -> untyped
  private def primary_key_type: () -> untyped
  private def add_join_records: (untyped rows, untyped row, untyped association) -> (untyped | nil)
  private def has_primary_key_column?: () -> untyped
  private def timestamp_column_names: () -> untyped
  private def inheritance_column_name: () -> untyped
  private def column_names: () -> untyped
  private def model_class=: (untyped class_name) -> (untyped | untyped | nil)
  # Loads the fixtures from the YAML file at +path+.
  # If the file sets the +model_class+ and current instance value is not set,
  # it uses the file value.
  private def read_fixture_files: (untyped path) -> untyped
  private def yaml_file_path: (untyped path) -> ::String
  attr_reader table_name: untyped
  attr_reader name: untyped
  attr_reader fixtures: untyped
  attr_reader model_class: untyped
  attr_reader config: untyped
  def self.all_loaded_fixtures: () -> untyped
  def all_loaded_fixtures: () -> untyped
  def self.all_loaded_fixtures=: (untyped val) -> untyped
  def all_loaded_fixtures=: (untyped val) -> untyped
  MAX_ID: Integer
end
