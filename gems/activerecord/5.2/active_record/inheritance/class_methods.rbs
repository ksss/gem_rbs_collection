# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Inheritance::ClassMethods
  # Determines if one of the attributes passed in is the inheritance column,
  # and if the inheritance column is attr accessible, it initializes an
  # instance of the given subclass instead of the base class.
  def new: (?untyped? attributes) ?{ () -> untyped } -> untyped

  # Returns +true+ if this does not need STI type condition. Returns
  # +false+ if STI type condition needs to be applied.
  def descends_from_active_record?: () -> (false | untyped)

  def finder_needs_type_condition?: () -> untyped

  # Returns the class descending directly from ActiveRecord::Base, or
  # an abstract class, if any, in the inheritance hierarchy.
  #
  # If A extends ActiveRecord::Base, A.base_class will return A. If B descends from A
  # through some arbitrarily deep hierarchy, B.base_class will return A.
  #
  # If B < A and C < B and if A is an abstract_class then both B.base_class
  # and C.base_class would return B as the answer since A is an abstract_class.
  def base_class: () -> untyped

  # Returns whether this class is an abstract class or not.
  def abstract_class?: () -> untyped

  def sti_name: () -> untyped

  def polymorphic_name: () -> untyped

  def inherited: (untyped subclass) -> untyped

  # Returns the class type of the record using the current module as a prefix. So descendants of
  # MyApp::Business::Account would appear as MyApp::Business::AccountSubclass.
  def compute_type: (untyped type_name) -> untyped

  # Called by +instantiate+ to decide which class to use for a new
  # record instance. For single-table inheritance, we check the record
  # for a +type+ column and return the corresponding class.
  private def discriminate_class_for_record: (untyped record) -> untyped

  private def using_single_table_inheritance?: (untyped record) -> untyped

  private def find_sti_class: (untyped type_name) -> untyped

  private def type_condition: (?untyped table) -> untyped

  # Detect the subclass from the inheritance column of attrs. If the inheritance column value
  # is not self or a valid subclass, raises ActiveRecord::SubclassNotFound
  private def subclass_from_attributes: (untyped attrs) -> untyped

  attr_accessor abstract_class: untyped
end
