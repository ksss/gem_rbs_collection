# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::NestedAttributes
  # Returns ActiveRecord::AutosaveAssociation::marked_for_destruction? It's
  # used in conjunction with fields_for to build a form element for the
  # destruction of this association.
  #
  # See ActionView::Helpers::FormHelper::fields_for for more info.
  def _destroy: () -> untyped

  # Assigns the given attributes to the association.
  #
  # If an associated record does not yet exist, one will be instantiated. If
  # an associated record already exists, the method's behavior depends on
  # the value of the update_only option. If update_only is +false+ and the
  # given attributes include an <tt>:id</tt> that matches the existing record's
  # id, then the existing record will be modified. If no <tt>:id</tt> is provided
  # it will be replaced with a new record. If update_only is +true+ the existing
  # record will be modified regardless of whether an <tt>:id</tt> is provided.
  #
  # If the given attributes include a matching <tt>:id</tt> attribute, or
  # update_only is true, and a <tt>:_destroy</tt> key set to a truthy value,
  # then the existing record will be marked for destruction.
  private def assign_nested_attributes_for_one_to_one_association: (untyped association_name, untyped attributes) -> untyped

  # Assigns the given attributes to the collection association.
  #
  # Hashes with an <tt>:id</tt> value matching an existing associated record
  # will update that record. Hashes without an <tt>:id</tt> value will build
  # a new record for the association. Hashes with a matching <tt>:id</tt>
  # value and a <tt>:_destroy</tt> key set to a truthy value will mark the
  # matched record for destruction.
  #
  # For example:
  #
  #   assign_nested_attributes_for_collection_association(:people, {
  #     '1' => { id: '1', name: 'Peter' },
  #     '2' => { name: 'John' },
  #     '3' => { id: '2', _destroy: true }
  #   })
  #
  # Will update the name of the Person with ID 1, build a new associated
  # person with the name 'John', and mark the associated Person with ID 2
  # for destruction.
  #
  # Also accepts an Array of attribute hashes:
  #
  #   assign_nested_attributes_for_collection_association(:people, [
  #     { id: '1', name: 'Peter' },
  #     { name: 'John' },
  #     { id: '2', _destroy: true }
  #   ])
  private def assign_nested_attributes_for_collection_association: (untyped association_name, untyped attributes_collection) -> untyped

  # Takes in a limit and checks if the attributes_collection has too many
  # records. It accepts limit in the form of symbol, proc, or
  # number-like object (anything that can be compared with an integer).
  #
  # Raises TooManyRecords error if the attributes_collection is
  # larger than the limit.
  private def check_record_limit!: (untyped limit, untyped attributes_collection) -> (untyped | nil)

  # Updates a record with the +attributes+ or marks it for destruction if
  # +allow_destroy+ is +true+ and has_destroy_flag? returns +true+.
  private def assign_to_or_mark_for_destruction: (untyped record, untyped attributes, untyped allow_destroy) -> untyped

  # Determines if a hash contains a truthy _destroy key.
  private def has_destroy_flag?: (untyped hash) -> untyped

  # Determines if a new record should be rejected by checking
  # has_destroy_flag? or if a <tt>:reject_if</tt> proc exists for this
  # association and evaluates to +true+.
  private def reject_new_record?: (untyped association_name, untyped attributes) -> untyped

  # Determines if a record with the particular +attributes+ should be
  # rejected by calling the reject_if Symbol or Proc (if defined).
  # The reject_if option is defined by +accepts_nested_attributes_for+.
  #
  # Returns false if there is a +destroy_flag+ on the attributes.
  private def call_reject_if: (untyped association_name, untyped attributes) -> (false | untyped)

  # Only take into account the destroy flag if <tt>:allow_destroy</tt> is true
  private def will_be_destroyed?: (untyped association_name, untyped attributes) -> untyped

  private def allow_destroy?: (untyped association_name) -> untyped

  private def raise_nested_attributes_record_not_found!: (untyped association_name, untyped record_id) -> untyped

  extend ActiveSupport::Concern

  UNASSIGNABLE_KEYS: Array[String]
end
