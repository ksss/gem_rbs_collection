# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Transactions
  # See ActiveRecord::Transactions::ClassMethods for detailed documentation.
  def transaction: (?::Hash[untyped, untyped] options) ?{ () -> untyped } -> untyped

  def destroy: () -> untyped

  def save: () -> untyped

  def save!: () -> untyped

  def touch: () -> untyped

  # Reset id and @new_record if the transaction rolls back.
  def rollback_active_record_state!: () { () -> untyped } -> untyped

  def before_committed!: () -> untyped

  # Call the #after_commit callbacks.
  #
  # Ensure that it is not called if the object was never persisted (failed create),
  # but call it after the commit of a destroyed object.
  def committed!: (?should_run_callbacks: bool) -> untyped

  # Call the #after_rollback callbacks. The +force_restore_state+ argument indicates if the record
  # state should be rolled back to the beginning or just to the last savepoint.
  def rolledback!: (?force_restore_state: bool, ?should_run_callbacks: bool) -> untyped

  # Add the record to the current transaction so that the #after_rollback and #after_commit callbacks
  # can be called.
  def add_to_transaction: () -> untyped

  # Executes +method+ within a transaction and captures its return value as a
  # status flag. If the status is true the transaction is committed, otherwise
  # a ROLLBACK is issued. In any case the status flag is returned.
  #
  # This method is available within the context of an ActiveRecord::Base
  # instance.
  def with_transaction_returning_status: () { () -> untyped } -> untyped

  # Save the new record state and id of a record so it can be restored later if a transaction fails.
  private def remember_transaction_record_state: () -> untyped

  private def remember_new_record_before_last_commit: () -> untyped

  # Clear the new record state and id of a record.
  private def clear_transaction_record_state: () -> untyped

  # Force to clear the transaction record state.
  private def force_clear_transaction_record_state: () -> untyped

  # Restore the new record state and id of a record that was previously saved by a call to save_record_state.
  private def restore_transaction_record_state: (?bool force) -> (untyped | nil)

  # Determine if a transaction included an action for :create, :update, or :destroy. Used in filtering callbacks.
  private def transaction_include_any_action?: (untyped actions) -> untyped

  private def set_transaction_state: (untyped state) -> untyped

  private def has_transactional_callbacks?: () -> untyped

  # Updates the attributes on this particular Active Record object so that
  # if it's associated with a transaction, then the state of the Active Record
  # object will be updated to reflect the current state of the transaction.
  #
  # The <tt>@transaction_state</tt> variable stores the states of the associated
  # transaction. This relies on the fact that a transaction can only be in
  # one rollback or commit (otherwise a list of states would be required).
  # Each Active Record object inside of a transaction carries that transaction's
  # TransactionState.
  #
  # This method checks to see if the ActiveRecord object's state reflects
  # the TransactionState, and rolls back or commits the Active Record object
  # as appropriate.
  #
  # Since Active Record objects can be inside multiple transactions, this
  # method recursively goes through the parent of the TransactionState and
  # checks if the Active Record object reflects the state of the object.
  private def sync_with_transaction_state: () -> untyped

  private def update_attributes_from_transaction_state: (untyped transaction_state) -> (untyped | nil)

  extend ActiveSupport::Concern

  attr_reader _committed_already_called: untyped

  attr_reader _trigger_update_callback: untyped

  attr_reader _trigger_destroy_callback: untyped

  ACTIONS: Array[Symbol]
end
