# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Validations
  # The validation process on save can be skipped by passing <tt>validate: false</tt>.
  # The regular {ActiveRecord::Base#save}[rdoc-ref:Persistence#save] method is replaced
  # with this when the validations module is mixed in, which it is by default.
  def save: (?::Hash[untyped, untyped] options) -> (untyped | false)

  # Attempts to save the record just like {ActiveRecord::Base#save}[rdoc-ref:Base#save] but
  # will raise an ActiveRecord::RecordInvalid exception instead of returning +false+ if the record is not valid.
  def save!: (?::Hash[untyped, untyped] options) -> untyped

  # Runs all the validations within the specified context. Returns +true+ if
  # no errors are found, +false+ otherwise.
  #
  # Aliased as #validate.
  #
  # If the argument is +false+ (default is +nil+), the context is set to <tt>:create</tt> if
  # {new_record?}[rdoc-ref:Persistence#new_record?] is +true+, and to <tt>:update</tt> if it is not.
  #
  # \Validations with no <tt>:on</tt> option will run no matter the context. \Validations with
  # some <tt>:on</tt> option will only run in the specified context.
  def valid?: (?untyped? context) -> untyped

  alias validate valid?

  private def default_validation_context: () -> (:create | :update)

  private def raise_validation_error: () -> untyped

  private def perform_validations: (?::Hash[untyped, untyped] options) -> untyped

  include ActiveModel::Validations

  extend ActiveSupport::Concern
end
