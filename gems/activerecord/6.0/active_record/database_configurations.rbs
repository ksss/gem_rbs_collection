# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveRecord::DatabaseConfigurations
  def initialize: (?::Hash[untyped, untyped] configurations) -> void
  # Collects the configs for the environment and optionally the specification
  # name passed in. To include replica configurations pass <tt>include_replicas: true</tt>.
  #
  # If a spec name is provided a single DatabaseConfig object will be
  # returned, otherwise an array of DatabaseConfig objects will be
  # returned that corresponds with the environment and type requested.
  #
  # ==== Options
  #
  # * <tt>env_name:</tt> The environment name. Defaults to +nil+ which will collect
  #   configs for all environments.
  # * <tt>spec_name:</tt> The specification name (i.e. primary, animals, etc.). Defaults
  #   to +nil+.
  # * <tt>include_replicas:</tt> Determines whether to include replicas in
  #   the returned list. Most of the time we're only iterating over the write
  #   connection (i.e. migrations don't need to run for the write and read connection).
  #   Defaults to +false+.
  def configs_for: (?env_name: untyped?, ?spec_name: untyped?, ?include_replicas: bool) -> untyped
  # Returns the config hash that corresponds with the environment
  #
  # If the application has multiple databases +default_hash+ will
  # return the first config hash for the environment.
  #
  #   { database: "my_db", adapter: "mysql2" }
  def default_hash: (?untyped env) -> untyped
  alias [] default_hash
  # Returns a single DatabaseConfig object based on the requested environment.
  #
  # If the application has multiple databases +find_db_config+ will return
  # the first DatabaseConfig for the environment.
  def find_db_config: (untyped env) -> untyped
  # Returns the DatabaseConfigurations object as a Hash.
  def to_h: () -> untyped
  # Checks if the application's configurations are empty.
  #
  # Aliased to blank?
  def empty?: () -> untyped
  alias blank? empty?
  def each: () { (untyped) -> untyped } -> untyped
  def first: () -> ::Array[untyped]
  private def env_with_configs: (?untyped? env) -> untyped
  private def build_configs: (untyped configs) -> untyped
  private def walk_configs: (untyped env_name, untyped config) -> untyped
  private def build_db_config_from_raw_config: (untyped env_name, untyped spec_name, untyped config) -> untyped
  private def build_db_config_from_string: (untyped env_name, untyped spec_name, untyped config) -> untyped
  private def build_db_config_from_hash: (untyped env_name, untyped spec_name, untyped config) -> untyped
  private def merge_db_environment_variables: (untyped current_env, untyped configs) -> untyped
  private def environment_url_config: (untyped env, untyped spec_name, untyped config) -> (nil | untyped)
  private def environment_value_for: (untyped spec_name) -> untyped
  private def method_missing: (untyped method, *untyped args) ?{ () -> untyped } -> untyped
  private def throw_setter_deprecation: (untyped method) -> untyped
  private def throw_getter_deprecation: (untyped method) -> untyped
  attr_reader configurations: untyped
  # defined by `delegate` to: untyped#configurations
  def any?: (*untyped, **untyped) -> untyped
end
