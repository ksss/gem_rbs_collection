# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Sanitization::ClassMethods
  # Accepts an array or string of SQL conditions and sanitizes
  # them into a valid SQL fragment for a WHERE clause.
  #
  #   sanitize_sql_for_conditions(["name=? and group_id=?", "foo'bar", 4])
  #   # => "name='foo''bar' and group_id=4"
  #
  #   sanitize_sql_for_conditions(["name=:name and group_id=:group_id", name: "foo'bar", group_id: 4])
  #   # => "name='foo''bar' and group_id='4'"
  #
  #   sanitize_sql_for_conditions(["name='%s' and group_id='%s'", "foo'bar", 4])
  #   # => "name='foo''bar' and group_id='4'"
  #
  #   sanitize_sql_for_conditions("name='foo''bar' and group_id='4'")
  #   # => "name='foo''bar' and group_id='4'"
  def sanitize_sql_for_conditions: (untyped condition) -> (nil | untyped)
  alias sanitize_sql sanitize_sql_for_conditions
  # Accepts an array, hash, or string of SQL conditions and sanitizes
  # them into a valid SQL fragment for a SET clause.
  #
  #   sanitize_sql_for_assignment(["name=? and group_id=?", nil, 4])
  #   # => "name=NULL and group_id=4"
  #
  #   sanitize_sql_for_assignment(["name=:name and group_id=:group_id", name: nil, group_id: 4])
  #   # => "name=NULL and group_id=4"
  #
  #   Post.sanitize_sql_for_assignment({ name: nil, group_id: 4 })
  #   # => "`posts`.`name` = NULL, `posts`.`group_id` = 4"
  #
  #   sanitize_sql_for_assignment("name=NULL and group_id='4'")
  #   # => "name=NULL and group_id='4'"
  def sanitize_sql_for_assignment: (untyped assignments, ?untyped default_table_name) -> untyped
  # Accepts an array, or string of SQL conditions and sanitizes
  # them into a valid SQL fragment for an ORDER clause.
  #
  #   sanitize_sql_for_order(["field(id, ?)", [1,3,2]])
  #   # => "field(id, 1,3,2)"
  #
  #   sanitize_sql_for_order("id ASC")
  #   # => "id ASC"
  def sanitize_sql_for_order: (untyped condition) -> untyped
  # Sanitizes a hash of attribute/value pairs into SQL conditions for a SET clause.
  #
  #   sanitize_sql_hash_for_assignment({ status: nil, group_id: 1 }, "posts")
  #   # => "`posts`.`status` = NULL, `posts`.`group_id` = 1"
  def sanitize_sql_hash_for_assignment: (untyped attrs, untyped table) -> untyped
  # Sanitizes a +string+ so that it is safe to use within an SQL
  # LIKE statement. This method uses +escape_character+ to escape all occurrences of "\", "_" and "%".
  #
  #   sanitize_sql_like("100%")
  #   # => "100\\%"
  #
  #   sanitize_sql_like("snake_cased_string")
  #   # => "snake\\_cased\\_string"
  #
  #   sanitize_sql_like("100%", "!")
  #   # => "100!%"
  #
  #   sanitize_sql_like("snake_cased_string", "!")
  #   # => "snake!_cased!_string"
  def sanitize_sql_like: (untyped string, ?::String escape_character) -> untyped
  # Accepts an array of conditions. The array has each value
  # sanitized and interpolated into the SQL statement.
  #
  #   sanitize_sql_array(["name=? and group_id=?", "foo'bar", 4])
  #   # => "name='foo''bar' and group_id=4"
  #
  #   sanitize_sql_array(["name=:name and group_id=:group_id", name: "foo'bar", group_id: 4])
  #   # => "name='foo''bar' and group_id=4"
  #
  #   sanitize_sql_array(["name='%s' and group_id='%s'", "foo'bar", 4])
  #   # => "name='foo''bar' and group_id='4'"
  def sanitize_sql_array: (untyped ary) -> untyped
  def disallow_raw_sql!: (untyped args, ?permit: untyped) -> (nil | untyped)
  private def replace_bind_variables: (untyped statement, untyped values) -> untyped
  private def replace_bind_variable: (untyped value, ?untyped c) -> untyped
  private def replace_named_bind_variables: (untyped statement, untyped bind_vars) -> untyped
  private def quote_bound_value: (untyped value, ?untyped c) -> untyped
  private def raise_if_bind_arity_mismatch: (untyped statement, untyped expected, untyped provided) -> (untyped | nil)
end
