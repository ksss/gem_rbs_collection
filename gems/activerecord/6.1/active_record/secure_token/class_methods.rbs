# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::SecureToken::ClassMethods
  # Example using #has_secure_token
  #
  #   # Schema: User(token:string, auth_token:string)
  #   class User < ActiveRecord::Base
  #     has_secure_token
  #     has_secure_token :auth_token, length: 36
  #   end
  #
  #   user = User.new
  #   user.save
  #   user.token # => "pX27zsMN2ViQKta1bGfLmVJE"
  #   user.auth_token # => "tU9bLuZseefXQ4yQxQo8wjtBvsAfPc78os6R"
  #   user.regenerate_token # => true
  #   user.regenerate_auth_token # => true
  #
  # <tt>SecureRandom::base58</tt> is used to generate at minimum a 24-character unique token, so collisions are highly unlikely.
  #
  # Note that it's still possible to generate a race condition in the database in the same way that
  # {validates_uniqueness_of}[rdoc-ref:Validations::ClassMethods#validates_uniqueness_of] can.
  # You're encouraged to add a unique index in the database to deal with this even more unlikely scenario.
  def has_secure_token: (?::Symbol attribute, ?length: untyped) -> untyped
  def generate_unique_secure_token: (?length: untyped) -> untyped
end
