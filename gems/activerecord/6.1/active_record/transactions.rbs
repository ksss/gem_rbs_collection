# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Transactions
  # See ActiveRecord::Transactions::ClassMethods for detailed documentation.
  def transaction: (**untyped options) ?{ () -> untyped } -> untyped
  def destroy: () -> untyped
  def save: () -> untyped
  def save!: () -> untyped
  def touch: () -> untyped
  def before_committed!: () -> untyped
  # Call the #after_commit callbacks.
  #
  # Ensure that it is not called if the object was never persisted (failed create),
  # but call it after the commit of a destroyed object.
  def committed!: (?should_run_callbacks: bool) -> untyped
  # Call the #after_rollback callbacks. The +force_restore_state+ argument indicates if the record
  # state should be rolled back to the beginning or just to the last savepoint.
  def rolledback!: (?force_restore_state: bool, ?should_run_callbacks: bool) -> untyped
  # Executes +method+ within a transaction and captures its return value as a
  # status flag. If the status is true the transaction is committed, otherwise
  # a ROLLBACK is issued. In any case the status flag is returned.
  #
  # This method is available within the context of an ActiveRecord::Base
  # instance.
  def with_transaction_returning_status: () { () -> untyped } -> untyped
  def trigger_transactional_callbacks?: () -> untyped
  # Save the new record state and id of a record so it can be restored later if a transaction fails.
  private def remember_transaction_record_state: () -> untyped
  # Clear the new record state and id of a record.
  private def clear_transaction_record_state: () -> (nil | untyped)
  # Force to clear the transaction record state.
  private def force_clear_transaction_record_state: () -> untyped
  # Restore the new record state and id of a record that was previously saved by a call to save_record_state.
  private def restore_transaction_record_state: (?bool force_restore_state) -> (untyped | nil | nil)
  # Determine if a transaction included an action for :create, :update, or :destroy. Used in filtering callbacks.
  private def transaction_include_any_action?: (untyped actions) -> untyped
  # Add the record to the current transaction so that the #after_rollback and #after_commit
  # callbacks can be called.
  private def add_to_transaction: (?bool ensure_finalize) -> untyped
  private def has_transactional_callbacks?: () -> untyped
  extend ActiveSupport::Concern
  attr_reader _committed_already_called: untyped
  attr_reader _trigger_update_callback: untyped
  attr_reader _trigger_destroy_callback: untyped
  ACTIONS: Array[Symbol]
end
