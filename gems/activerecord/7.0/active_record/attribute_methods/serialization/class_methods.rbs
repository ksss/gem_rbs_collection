# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::AttributeMethods::Serialization::ClassMethods
  # If you have an attribute that needs to be saved to the database as a
  # serialized object, and retrieved by deserializing into the same object,
  # then specify the name of that attribute using this method and serialization
  # will be handled automatically.
  #
  # The serialization format may be YAML, JSON, or any custom format using a
  # custom coder class.
  #
  # Keep in mind that database adapters handle certain serialization tasks
  # for you. For instance: +json+ and +jsonb+ types in PostgreSQL will be
  # converted between JSON object/array syntax and Ruby +Hash+ or +Array+
  # objects transparently. There is no need to use #serialize in this
  # case.
  #
  # For more complex cases, such as conversion to or from your application
  # domain objects, consider using the ActiveRecord::Attributes API.
  #
  # ==== Parameters
  #
  # * +attr_name+ - The name of the attribute to serialize.
  # * +class_name_or_coder+ - Optional. May be one of the following:
  #   * <em>default</em> - The attribute value will be serialized as YAML.
  #     The attribute value must respond to +to_yaml+.
  #   * +Array+ - The attribute value will be serialized as YAML, but an
  #     empty +Array+ will be serialized as +NULL+. The attribute value
  #     must be an +Array+.
  #   * +Hash+ - The attribute value will be serialized as YAML, but an
  #     empty +Hash+ will be serialized as +NULL+. The attribute value
  #     must be a +Hash+.
  #   * +JSON+ - The attribute value will be serialized as JSON. The
  #     attribute value must respond to +to_json+.
  #   * <em>custom coder</em> - The attribute value will be serialized
  #     using the coder's <tt>dump(value)</tt> method, and will be
  #     deserialized using the coder's <tt>load(string)</tt> method. The
  #     +dump+ method may return +nil+ to serialize the value as +NULL+.
  #
  # ==== Options
  #
  # * +:default+ - The default value to use when no value is provided. If
  #   this option is not passed, the previous default value (if any) will
  #   be used. Otherwise, the default will be +nil+.
  #
  # ==== Examples
  #
  # ===== Serialize the +preferences+ attribute using YAML
  #
  #   class User < ActiveRecord::Base
  #     serialize :preferences
  #   end
  #
  # ===== Serialize the +preferences+ attribute using JSON
  #
  #   class User < ActiveRecord::Base
  #     serialize :preferences, JSON
  #   end
  #
  # ===== Serialize the +preferences+ +Hash+ using YAML
  #
  #   class User < ActiveRecord::Base
  #     serialize :preferences, Hash
  #   end
  #
  # ===== Serialize the +preferences+ attribute using a custom coder
  #
  #   class Rot13JSON
  #     def self.rot13(string)
  #       string.tr("a-zA-Z", "n-za-mN-ZA-M")
  #     end
  #
  #     # Serializes an attribute value to a string that will be stored in the database.
  #     def self.dump(value)
  #       rot13(ActiveSupport::JSON.dump(value))
  #     end
  #
  #     # Deserializes a string from the database to an attribute value.
  #     def self.load(string)
  #       ActiveSupport::JSON.load(rot13(string))
  #     end
  #   end
  #
  #   class User < ActiveRecord::Base
  #     serialize :preferences, Rot13JSON
  #   end
  #
  def serialize: (untyped attr_name, ?untyped class_name_or_coder, **untyped options) -> untyped
  private def type_incompatible_with_serialize?: (untyped `type`, untyped class_name) -> untyped
end
