# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveRecord::Scoping::Default::ClassMethods
  # Returns a scope for the model without the previously set scopes.
  #
  #   class Post < ActiveRecord::Base
  #     def self.default_scope
  #       where(published: true)
  #     end
  #   end
  #
  #   Post.all                                  # Fires "SELECT * FROM posts WHERE published = true"
  #   Post.unscoped.all                         # Fires "SELECT * FROM posts"
  #   Post.where(published: false).unscoped.all # Fires "SELECT * FROM posts"
  #
  # This method also accepts a block. All queries inside the block will
  # not use the previously set scopes.
  #
  #   Post.unscoped {
  #     Post.limit(10) # Fires "SELECT * FROM posts LIMIT 10"
  #   }
  def unscoped: () ?{ () -> untyped } -> untyped
  # Are there attributes associated with this scope?
  def scope_attributes?: () -> untyped
  # Checks if the model has any default scopes. If all_queries
  # is set to true, the method will check if there are any
  # default_scopes for the model  where +all_queries+ is true.
  def default_scopes?: (?all_queries: bool) -> untyped
  # Use this macro in your model to set a default scope for all operations on
  # the model.
  #
  #   class Article < ActiveRecord::Base
  #     default_scope { where(published: true) }
  #   end
  #
  #   Article.all # => SELECT * FROM articles WHERE published = true
  #
  # The #default_scope is also applied while creating/building a record.
  # It is not applied while updating or deleting a record.
  #
  #   Article.new.published    # => true
  #   Article.create.published # => true
  #
  # To apply a #default_scope when updating or deleting a record, add
  # <tt>all_queries: true</tt>:
  #
  #   class Article < ActiveRecord::Base
  #     default_scope -> { where(blog_id: 1) }, all_queries: true
  #   end
  #
  # Applying a default scope to all queries will ensure that records
  # are always queried by the additional conditions. Note that only
  # where clauses apply, as it does not make sense to add order to
  # queries that return a single object by primary key.
  #
  #   Article.find(1).destroy
  #   => DELETE ... FROM `articles` where ID = 1 AND blog_id = 1;
  #
  # (You can also pass any object which responds to +call+ to the
  # +default_scope+ macro, and it will be called when building the
  # default scope.)
  #
  # If you use multiple #default_scope declarations in your model then
  # they will be merged together:
  #
  #   class Article < ActiveRecord::Base
  #     default_scope { where(published: true) }
  #     default_scope { where(rating: 'G') }
  #   end
  #
  #   Article.all # => SELECT * FROM articles WHERE published = true AND rating = 'G'
  #
  # This is also the case with inheritance and module includes where the
  # parent or module defines a #default_scope and the child or including
  # class defines a second one.
  #
  # If you need to do more complex things with a default scope, you can
  # alternatively define it as a class method:
  #
  #   class Article < ActiveRecord::Base
  #     def self.default_scope
  #       # Should return a scope, you can call 'super' here etc.
  #     end
  #   end
  private def default_scope: (?untyped? scope, ?all_queries: untyped?) ?{ () -> untyped } -> untyped
  private def build_default_scope: (?untyped relation, ?all_queries: untyped?) -> (nil | untyped)
  # If all_queries is nil, only execute on select and insert queries.
  #
  # If all_queries is true, check if the default_scope object has
  # all_queries set, then execute on all queries; select, insert, update
  # and delete.
  private def execute_scope?: (untyped all_queries, untyped default_scope_obj) -> untyped
  private def ignore_default_scope?: () -> untyped
  private def ignore_default_scope=: (untyped ignore) -> untyped
  # The ignore_default_scope flag is used to prevent an infinite recursion
  # situation where a default scope references a scope which has a default
  # scope which references a scope...
  private def evaluate_default_scope: () { () -> untyped } -> (nil | untyped)
end
