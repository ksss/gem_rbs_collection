# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveStorage::Service::S3Service < ::ActiveStorage::Service
  def initialize: (bucket: untyped, ?upload: ::Hash[untyped, untyped], ?public: bool, **untyped options) -> void
  def upload: (untyped key, untyped io, ?checksum: untyped?, ?filename: untyped?, ?content_type: untyped?, ?disposition: untyped?) -> untyped
  def download: (untyped key) ?{ () -> untyped } -> untyped
  def download_chunk: (untyped key, untyped range) -> untyped
  def delete: (untyped key) -> untyped
  def delete_prefixed: (untyped prefix) -> untyped
  def exist?: (untyped key) -> untyped
  def url_for_direct_upload: (untyped key, expires_in: untyped, content_type: untyped, content_length: untyped, checksum: untyped) -> untyped
  def headers_for_direct_upload: (untyped key, content_type: untyped, checksum: untyped, ?filename: untyped?, ?disposition: untyped?) -> ::Hash[::String, untyped]
  private def private_url: (untyped key, expires_in: untyped, filename: untyped, disposition: untyped, content_type: untyped) -> untyped
  private def public_url: (untyped key) -> untyped
  private def upload_with_single_part: (untyped key, untyped io, ?checksum: untyped?, ?content_type: untyped?, ?content_disposition: untyped?) -> untyped
  private def upload_with_multipart: (untyped key, untyped io, ?content_type: untyped?, ?content_disposition: untyped?) -> untyped
  private def object_for: (untyped key) -> untyped
  # Reads the object for the given key in chunks, yielding each to the block.
  private def stream: (untyped key) { (untyped) -> untyped } -> untyped
end
