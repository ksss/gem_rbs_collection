# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveStorage::Attached::Many < ::ActiveStorage::Attached
  # Returns all the associated attachment records.
  #
  # All methods called on this proxy object that aren't listed here will automatically be delegated to +attachments+.
  def attachments: () -> untyped
  # Returns all attached blobs.
  def blobs: () -> untyped
  # Attaches one or more +attachables+ to the record.
  #
  # If the record is persisted and unchanged, the attachments are saved to
  # the database immediately. Otherwise, they'll be saved to the DB when the
  # record is next saved.
  #
  #   document.images.attach(params[:images]) # Array of ActionDispatch::Http::UploadedFile objects
  #   document.images.attach(params[:signed_blob_id]) # Signed reference to blob from direct upload
  #   document.images.attach(io: File.open("/path/to/racecar.jpg"), filename: "racecar.jpg", content_type: "image/jpeg")
  #   document.images.attach([ first_blob, second_blob ])
  def attach: (*untyped attachables) -> untyped
  # Returns true if any attachments have been made.
  #
  #   class Gallery < ApplicationRecord
  #     has_many_attached :photos
  #   end
  #
  #   Gallery.new.photos.attached? # => false
  def attached?: () -> untyped
  private def purge_many: () -> untyped
  private def detach_many: () -> untyped
  # defined by `delegate` to: untyped#purge_many
  def purge: (*untyped, **untyped) -> untyped
  # defined by `delegate` to: untyped#purge_many
  def purge_later: (*untyped, **untyped) -> untyped
  # defined by `delegate` to: untyped#detach_many
  def detach: (*untyped, **untyped) -> untyped
end
