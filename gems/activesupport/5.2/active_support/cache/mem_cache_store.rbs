# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveSupport::Cache::MemCacheStore < ::ActiveSupport::Cache::Store
  # Creates a new Dalli::Client instance with specified addresses and options.
  # By default address is equal localhost:11211.
  #
  #   ActiveSupport::Cache::MemCacheStore.build_mem_cache
  #     # => #<Dalli::Client:0x007f98a47d2028 @servers=["localhost:11211"], @options={}, @ring=nil>
  #   ActiveSupport::Cache::MemCacheStore.build_mem_cache('localhost:10290')
  #     # => #<Dalli::Client:0x007f98a47b3a60 @servers=["localhost:10290"], @options={}, @ring=nil>
  def self.build_mem_cache: (*untyped addresses) -> untyped
  # Creates a new MemCacheStore object, with the given memcached server
  # addresses. Each address is either a host name, or a host-with-port string
  # in the form of "host_name:port". For example:
  #
  #   ActiveSupport::Cache::MemCacheStore.new("localhost", "server-downstairs.localnetwork:8229")
  #
  # If no addresses are specified, then MemCacheStore will connect to
  # localhost port 11211 (the default memcached port).
  def initialize: (*untyped addresses) -> void
  # Increment a cached value. This method uses the memcached incr atomic
  # operator and can only be used on values written with the :raw option.
  # Calling it on a value not stored with :raw will initialize that value
  # to zero.
  def increment: (untyped name, ?::Integer amount, ?untyped? options) -> untyped
  # Decrement a cached value. This method uses the memcached decr atomic
  # operator and can only be used on values written with the :raw option.
  # Calling it on a value not stored with :raw will initialize that value
  # to zero.
  def decrement: (untyped name, ?::Integer amount, ?untyped? options) -> untyped
  # Clear the entire cache on all memcached servers. This method should
  # be used with care when shared cache is being used.
  def clear: (?untyped? options) -> untyped
  # Get the statistics from the memcached servers.
  def stats: () -> untyped
  # Read an entry from the cache.
  private def read_entry: (untyped key, untyped options) -> untyped
  # Write an entry to the cache.
  private def write_entry: (untyped key, untyped entry, untyped options) -> untyped
  # Reads multiple entries from the cache implementation.
  private def read_multi_entries: (untyped names, untyped options) -> untyped
  # Delete an entry from the cache.
  private def delete_entry: (untyped key, untyped options) -> untyped
  # Memcache keys are binaries. So we need to force their encoding to binary
  # before applying the regular expression to ensure we are escaping all
  # characters properly.
  private def normalize_key: (untyped key, untyped options) -> untyped
  private def deserialize_entry: (untyped entry) -> (untyped | nil)
  private def rescue_error_with: (untyped fallback) { () -> untyped } -> untyped
end
