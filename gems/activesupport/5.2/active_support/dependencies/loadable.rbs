# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveSupport::Dependencies::Loadable : BasicObject
  def self.exclude_from: (untyped base) -> untyped

  def require_or_load: (untyped file_name) -> untyped

  # Interprets a file using <tt>mechanism</tt> and marks its defined
  # constants as autoloaded. <tt>file_name</tt> can be either a string or
  # respond to <tt>to_path</tt>.
  #
  # Use this method in code that absolutely needs a certain constant to be
  # defined at that point. A typical use case is to make constant name
  # resolution deterministic for constants with the same relative name in
  # different namespaces whose evaluation would depend on load order
  # otherwise.
  def require_dependency: (untyped file_name, ?::String message) -> untyped

  def load_dependency: (untyped file) { () -> untyped } -> untyped

  # Mark the given constant as unloadable. Unloadable constants are removed
  # each time dependencies are cleared.
  #
  # Note that marking a constant for unloading need only be done once. Setup
  # or init scripts may list each unloadable constant that may need unloading;
  # each constant will be removed for every subsequent clear, as opposed to
  # for the first clear.
  #
  # The provided constant descriptor may be a (non-anonymous) module or class,
  # or a qualified constant name as a string or symbol.
  #
  # Returns +true+ if the constant was not previously marked for unloading,
  # +false+ otherwise.
  def unloadable: (untyped const_desc) -> untyped

  private def load: (untyped file, ?bool wrap) -> untyped

  private def require: (untyped file) -> untyped
end
