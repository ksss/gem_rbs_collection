# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveSupport::Configurable::ClassMethods
  def config: () -> untyped
  def configure: () { (untyped) -> untyped } -> untyped
  # Allows you to add shortcut so that you don't have to refer to attribute
  # through config. Also look at the example for config to contrast.
  #
  # Defines both class and instance config accessors.
  #
  #   class User
  #     include ActiveSupport::Configurable
  #     config_accessor :allowed_access
  #   end
  #
  #   User.allowed_access # => nil
  #   User.allowed_access = false
  #   User.allowed_access # => false
  #
  #   user = User.new
  #   user.allowed_access # => false
  #   user.allowed_access = true
  #   user.allowed_access # => true
  #
  #   User.allowed_access # => false
  #
  # The attribute name must be a valid method name in Ruby.
  #
  #   class User
  #     include ActiveSupport::Configurable
  #     config_accessor :"1_Badname"
  #   end
  #   # => NameError: invalid config attribute name
  #
  # To omit the instance writer method, pass <tt>instance_writer: false</tt>.
  # To omit the instance reader method, pass <tt>instance_reader: false</tt>.
  #
  #   class User
  #     include ActiveSupport::Configurable
  #     config_accessor :allowed_access, instance_reader: false, instance_writer: false
  #   end
  #
  #   User.allowed_access = false
  #   User.allowed_access # => false
  #
  #   User.new.allowed_access = true # => NoMethodError
  #   User.new.allowed_access        # => NoMethodError
  #
  # Or pass <tt>instance_accessor: false</tt>, to omit both instance methods.
  #
  #   class User
  #     include ActiveSupport::Configurable
  #     config_accessor :allowed_access, instance_accessor: false
  #   end
  #
  #   User.allowed_access = false
  #   User.allowed_access # => false
  #
  #   User.new.allowed_access = true # => NoMethodError
  #   User.new.allowed_access        # => NoMethodError
  #
  # Also you can pass a block to set up the attribute with a default value.
  #
  #   class User
  #     include ActiveSupport::Configurable
  #     config_accessor :hair_colors do
  #       [:brown, :black, :blonde, :red]
  #     end
  #   end
  #
  #   User.hair_colors # => [:brown, :black, :blonde, :red]
  private def config_accessor: (*untyped names, ?instance_reader: bool, ?instance_writer: bool, ?instance_accessor: bool) { () -> untyped } -> untyped
end
