# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module DateAndTime::Calculations
  # Returns a new date/time representing yesterday.
  def yesterday: () -> untyped
  # Returns a new date/time representing tomorrow.
  def tomorrow: () -> untyped
  # Returns true if the date/time is today.
  def today?: () -> untyped
  # Returns true if the date/time is in the past.
  def past?: () -> untyped
  # Returns true if the date/time is in the future.
  def future?: () -> untyped
  # Returns true if the date/time falls on a Saturday or Sunday.
  def on_weekend?: () -> untyped
  # Returns true if the date/time does not fall on a Saturday or Sunday.
  def on_weekday?: () -> untyped
  # Returns true if the date/time falls before <tt>date_or_time</tt>.
  def before?: (untyped date_or_time) -> untyped
  # Returns true if the date/time falls after <tt>date_or_time</tt>.
  def after?: (untyped date_or_time) -> untyped
  # Returns a new date/time the specified number of days ago.
  def days_ago: (untyped days) -> untyped
  # Returns a new date/time the specified number of days in the future.
  def days_since: (untyped days) -> untyped
  # Returns a new date/time the specified number of weeks ago.
  def weeks_ago: (untyped weeks) -> untyped
  # Returns a new date/time the specified number of weeks in the future.
  def weeks_since: (untyped weeks) -> untyped
  # Returns a new date/time the specified number of months ago.
  def months_ago: (untyped months) -> untyped
  # Returns a new date/time the specified number of months in the future.
  def months_since: (untyped months) -> untyped
  # Returns a new date/time the specified number of years ago.
  def years_ago: (untyped years) -> untyped
  # Returns a new date/time the specified number of years in the future.
  def years_since: (untyped years) -> untyped
  # Returns a new date/time at the start of the month.
  #
  #   today = Date.today # => Thu, 18 Jun 2015
  #   today.beginning_of_month # => Mon, 01 Jun 2015
  #
  # +DateTime+ objects will have a time set to 0:00.
  #
  #   now = DateTime.current # => Thu, 18 Jun 2015 15:23:13 +0000
  #   now.beginning_of_month # => Mon, 01 Jun 2015 00:00:00 +0000
  def beginning_of_month: () -> untyped
  alias at_beginning_of_month beginning_of_month
  # Returns a new date/time at the start of the quarter.
  #
  #   today = Date.today # => Fri, 10 Jul 2015
  #   today.beginning_of_quarter # => Wed, 01 Jul 2015
  #
  # +DateTime+ objects will have a time set to 0:00.
  #
  #   now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000
  #   now.beginning_of_quarter # => Wed, 01 Jul 2015 00:00:00 +0000
  def beginning_of_quarter: () -> untyped
  alias at_beginning_of_quarter beginning_of_quarter
  # Returns a new date/time at the end of the quarter.
  #
  #   today = Date.today # => Fri, 10 Jul 2015
  #   today.end_of_quarter # => Wed, 30 Sep 2015
  #
  # +DateTime+ objects will have a time set to 23:59:59.
  #
  #   now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000
  #   now.end_of_quarter # => Wed, 30 Sep 2015 23:59:59 +0000
  def end_of_quarter: () -> untyped
  alias at_end_of_quarter end_of_quarter
  # Returns a new date/time at the beginning of the year.
  #
  #   today = Date.today # => Fri, 10 Jul 2015
  #   today.beginning_of_year # => Thu, 01 Jan 2015
  #
  # +DateTime+ objects will have a time set to 0:00.
  #
  #   now = DateTime.current # => Fri, 10 Jul 2015 18:41:29 +0000
  #   now.beginning_of_year # => Thu, 01 Jan 2015 00:00:00 +0000
  def beginning_of_year: () -> untyped
  alias at_beginning_of_year beginning_of_year
  # Returns a new date/time representing the given day in the next week.
  #
  #   today = Date.today # => Thu, 07 May 2015
  #   today.next_week    # => Mon, 11 May 2015
  #
  # The +given_day_in_next_week+ defaults to the beginning of the week
  # which is determined by +Date.beginning_of_week+ or +config.beginning_of_week+
  # when set.
  #
  #   today = Date.today       # => Thu, 07 May 2015
  #   today.next_week(:friday) # => Fri, 15 May 2015
  #
  # +DateTime+ objects have their time set to 0:00 unless +same_time+ is true.
  #
  #   now = DateTime.current # => Thu, 07 May 2015 13:31:16 +0000
  #   now.next_week      # => Mon, 11 May 2015 00:00:00 +0000
  def next_week: (?untyped given_day_in_next_week, ?same_time: bool) -> untyped
  # Returns a new date/time representing the next weekday.
  def next_weekday: () -> untyped
  # Short-hand for months_since(3)
  def next_quarter: () -> untyped
  # Returns a new date/time representing the given day in the previous week.
  # Week is assumed to start on +start_day+, default is
  # +Date.beginning_of_week+ or +config.beginning_of_week+ when set.
  # DateTime objects have their time set to 0:00 unless +same_time+ is true.
  def prev_week: (?untyped start_day, ?same_time: bool) -> untyped
  alias last_week prev_week
  # Returns a new date/time representing the previous weekday.
  def prev_weekday: () -> untyped
  alias last_weekday prev_weekday
  # Short-hand for months_ago(1).
  def last_month: () -> untyped
  # Short-hand for months_ago(3).
  def prev_quarter: () -> untyped
  alias last_quarter prev_quarter
  # Short-hand for years_ago(1).
  def last_year: () -> untyped
  # Returns the number of days to the start of the week on the given day.
  # Week is assumed to start on +start_day+, default is
  # +Date.beginning_of_week+ or +config.beginning_of_week+ when set.
  def days_to_week_start: (?untyped start_day) -> untyped
  # Returns a new date/time representing the start of this week on the given day.
  # Week is assumed to start on +start_day+, default is
  # +Date.beginning_of_week+ or +config.beginning_of_week+ when set.
  # +DateTime+ objects have their time set to 0:00.
  def beginning_of_week: (?untyped start_day) -> untyped
  alias at_beginning_of_week beginning_of_week
  # Returns Monday of this week assuming that week starts on Monday.
  # +DateTime+ objects have their time set to 0:00.
  def monday: () -> untyped
  # Returns a new date/time representing the end of this week on the given day.
  # Week is assumed to start on +start_day+, default is
  # +Date.beginning_of_week+ or +config.beginning_of_week+ when set.
  # DateTime objects have their time set to 23:59:59.
  def end_of_week: (?untyped start_day) -> untyped
  alias at_end_of_week end_of_week
  # Returns Sunday of this week assuming that week starts on Monday.
  # +DateTime+ objects have their time set to 23:59:59.
  def sunday: () -> untyped
  # Returns a new date/time representing the end of the month.
  # DateTime objects will have a time set to 23:59:59.
  def end_of_month: () -> untyped
  alias at_end_of_month end_of_month
  # Returns a new date/time representing the end of the year.
  # DateTime objects will have a time set to 23:59:59.
  def end_of_year: () -> untyped
  alias at_end_of_year end_of_year
  # Returns a Range representing the whole day of the current date/time.
  def all_day: () -> ::Range[untyped]
  # Returns a Range representing the whole week of the current date/time.
  # Week starts on start_day, default is <tt>Date.beginning_of_week</tt> or <tt>config.beginning_of_week</tt> when set.
  def all_week: (?untyped start_day) -> ::Range[untyped]
  # Returns a Range representing the whole month of the current date/time.
  def all_month: () -> ::Range[untyped]
  # Returns a Range representing the whole quarter of the current date/time.
  def all_quarter: () -> ::Range[untyped]
  # Returns a Range representing the whole year of the current date/time.
  def all_year: () -> ::Range[untyped]
  # Returns a new date/time representing the next occurrence of the specified day of week.
  #
  #   today = Date.today               # => Thu, 14 Dec 2017
  #   today.next_occurring(:monday)    # => Mon, 18 Dec 2017
  #   today.next_occurring(:thursday)  # => Thu, 21 Dec 2017
  def next_occurring: (untyped day_of_week) -> untyped
  # Returns a new date/time representing the previous occurrence of the specified day of week.
  #
  #   today = Date.today               # => Thu, 14 Dec 2017
  #   today.prev_occurring(:monday)    # => Mon, 11 Dec 2017
  #   today.prev_occurring(:thursday)  # => Thu, 07 Dec 2017
  def prev_occurring: (untyped day_of_week) -> untyped
  private def first_hour: (untyped date_or_time) -> untyped
  private def last_hour: (untyped date_or_time) -> untyped
  private def days_span: (untyped day) -> untyped
  private def copy_time_to: (untyped other) -> untyped
  DAYS_INTO_WEEK: Hash[Symbol, Integer]
  WEEKEND_DAYS: Array[Integer]
end
