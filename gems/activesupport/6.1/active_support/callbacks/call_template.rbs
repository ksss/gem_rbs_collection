# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveSupport::Callbacks::CallTemplate
  def initialize: (untyped target, untyped method, untyped arguments, untyped block) -> void
  # Return the parts needed to make this call, with the given
  # input values.
  #
  # Returns an array of the form:
  #
  #   [target, block, method, *arguments]
  #
  # This array can be used as such:
  #
  #   target.send(method, *arguments, &block)
  #
  # The actual invocation is left up to the caller to minimize
  # call stack pollution.
  def expand: (untyped target, untyped value, untyped block) -> untyped
  # Return a lambda that will make this call when given the input
  # values.
  def make_lambda: () -> untyped
  # Return a lambda that will make this call when given the input
  # values, but then return the boolean inverse of that result.
  def inverted_lambda: () -> untyped
  # Filters support:
  #
  #   Symbols:: A method to call.
  #   Procs::   A proc to call with the object.
  #   Objects:: An object with a <tt>before_foo</tt> method on it to call.
  #
  # All of these objects are converted into a CallTemplate and handled
  # the same after this point.
  def self.build: (untyped filter, untyped callback) -> untyped
end
