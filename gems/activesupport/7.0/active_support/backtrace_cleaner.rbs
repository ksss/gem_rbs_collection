# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveSupport::BacktraceCleaner
  def initialize: () -> void
  # Returns the backtrace after all filters and silencers have been run
  # against it. Filters run first, then silencers.
  def clean: (untyped backtrace, ?::Symbol kind) -> untyped
  alias filter clean
  # Adds a filter from the block provided. Each line in the backtrace will be
  # mapped against this filter.
  #
  #   # Will turn "/my/rails/root/app/models/person.rb" into "/app/models/person.rb"
  #   backtrace_cleaner.add_filter { |line| line.gsub(Rails.root, '') }
  def add_filter: () ?{ () -> untyped } -> untyped
  # Adds a silencer from the block provided. If the silencer returns +true+
  # for a given line, it will be excluded from the clean backtrace.
  #
  #   # Will reject all lines that include the word "puma", like "/gems/puma/server.rb" or "/app/my_puma_server/rb"
  #   backtrace_cleaner.add_silencer { |line| /puma/.match?(line) }
  def add_silencer: () ?{ () -> untyped } -> untyped
  # Removes all silencers, but leaves in the filters. Useful if your
  # context of debugging suddenly expands as you suspect a bug in one of
  # the libraries you use.
  def remove_silencers!: () -> untyped
  # Removes all filters, but leaves in the silencers. Useful if you suddenly
  # need to see entire filepaths in the backtrace that you had already
  # filtered out.
  def remove_filters!: () -> untyped
  private def add_gem_filter: () -> (nil | untyped)
  private def add_gem_silencer: () -> untyped
  private def add_stdlib_silencer: () -> untyped
  private def filter_backtrace: (untyped backtrace) -> untyped
  private def silence: (untyped backtrace) -> untyped
  private def noise: (untyped backtrace) -> untyped
  FORMATTED_GEMS_PATTERN: Regexp
end
