# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class ActiveSupport::EncryptedFile
  def self.generate_key: () -> untyped
  def self.expected_key_length: () -> untyped
  def initialize: (content_path: untyped, key_path: untyped, env_key: untyped, raise_if_missing_key: untyped) -> void
  # Returns the encryption key, first trying the environment variable
  # specified by +env_key+, then trying the key file specified by +key_path+.
  # If +raise_if_missing_key+ is true, raises MissingKeyError if the
  # environment variable is not set and the key file does not exist.
  def key: () -> untyped
  # Reads the file and returns the decrypted content.
  #
  # Raises:
  # - MissingKeyError if the key is missing and +raise_if_missing_key+ is true.
  # - MissingContentError if the encrypted file does not exist or otherwise
  #   if the key is missing.
  # - ActiveSupport::MessageEncryptor::InvalidMessage if the content cannot be
  #   decrypted or verified.
  def read: () -> untyped
  def write: (untyped contents) -> untyped
  def change: () ?{ () -> untyped } -> untyped
  private def writing: (untyped contents) { (untyped) -> untyped } -> untyped
  private def encrypt: (untyped contents) -> untyped
  private def decrypt: (untyped contents) -> untyped
  private def encryptor: () -> untyped
  private def read_env_key: () -> untyped
  private def read_key_file: () -> untyped
  private def handle_missing_key: () -> (untyped | nil)
  private def check_key_length: () -> (untyped | nil)
  attr_reader content_path: untyped
  attr_reader key_path: untyped
  attr_reader env_key: untyped
  attr_reader raise_if_missing_key: untyped
  CIPHER: String
end
