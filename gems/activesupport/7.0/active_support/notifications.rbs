# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveSupport::Notifications
  def self.publish: (untyped name, *untyped args) -> untyped

  def self.publish_event: (untyped event) -> untyped

  def self.instrument: (untyped name, ?::Hash[untyped, untyped] payload) { (untyped) -> untyped } -> (untyped | untyped | nil)

  # Subscribe to a given event name with the passed +block+.
  #
  # You can subscribe to events by passing a String to match exact event
  # names, or by passing a Regexp to match all events that match a pattern.
  #
  #   ActiveSupport::Notifications.subscribe(/render/) do |*args|
  #     @event = ActiveSupport::Notifications::Event.new(*args)
  #   end
  #
  # The +block+ will receive five parameters with information about the event:
  #
  #   ActiveSupport::Notifications.subscribe('render') do |name, start, finish, id, payload|
  #     name    # => String, name of the event (such as 'render' from above)
  #     start   # => Time, when the instrumented block started execution
  #     finish  # => Time, when the instrumented block ended execution
  #     id      # => String, unique ID for the instrumenter that fired the event
  #     payload # => Hash, the payload
  #   end
  #
  # If the block passed to the method only takes one parameter,
  # it will yield an event object to the block:
  #
  #   ActiveSupport::Notifications.subscribe(/render/) do |event|
  #     @event = event
  #   end
  #
  # Raises an error if invalid event name type is passed:
  #
  #  ActiveSupport::Notifications.subscribe(:render) {|*args| ...}
  #  #=> ArgumentError (pattern must be specified as a String, Regexp or empty)
  #
  def self.subscribe: (?untyped? pattern, ?untyped? callback) ?{ () -> untyped } -> untyped

  def self.monotonic_subscribe: (?untyped? pattern, ?untyped? callback) ?{ () -> untyped } -> untyped

  def self.subscribed: (untyped callback, ?untyped? pattern, ?monotonic: bool) { () -> untyped } -> untyped

  def self.unsubscribe: (untyped subscriber_or_name) -> untyped

  def self.instrumenter: () -> untyped

  private def self.registry: () -> untyped

  attr_accessor self.notifier: untyped
end
