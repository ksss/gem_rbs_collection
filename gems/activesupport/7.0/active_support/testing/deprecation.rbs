# !!! GENERATED CODE !!!
# Please see generators/rails-generator

module ActiveSupport::Testing::Deprecation
  # Asserts that a matching deprecation warning was emitted by the given deprecator during the execution of the yielded block.
  #
  #   assert_deprecated(/foo/, CustomDeprecator) do
  #     CustomDeprecator.warn "foo should no longer be used"
  #   end
  #
  # The +match+ object may be a +Regexp+, or +String+ appearing in the message.
  #
  #   assert_deprecated('foo', CustomDeprecator) do
  #     CustomDeprecator.warn "foo should no longer be used"
  #   end
  #
  # If the +match+ is omitted (or explicitly +nil+), any deprecation warning will match.
  #
  #   assert_deprecated(nil, CustomDeprecator) do
  #     CustomDeprecator.warn "foo should no longer be used"
  #   end
  #
  # If no +deprecator+ is given, defaults to ActiveSupport::Deprecation.
  #
  #   assert_deprecated do
  #     ActiveSupport::Deprecation.warn "foo should no longer be used"
  #   end
  def assert_deprecated: (?untyped? match, ?untyped? deprecator) ?{ () -> untyped } -> untyped
  # Asserts that no deprecation warnings are emitted by the given deprecator during the execution of the yielded block.
  #
  #   assert_not_deprecated(CustomDeprecator) do
  #     CustomDeprecator.warn "message" # fails assertion
  #   end
  #
  # If no +deprecator+ is given, defaults to ActiveSupport::Deprecation.
  #
  #   assert_not_deprecated do
  #     ActiveSupport::Deprecation.warn "message" # fails assertion
  #   end
  #
  #   assert_not_deprecated do
  #     CustomDeprecator.warn "message" # passes assertion
  #   end
  def assert_not_deprecated: (?untyped? deprecator) ?{ () -> untyped } -> untyped
  # Returns an array of all the deprecation warnings emitted by the given
  # +deprecator+ during the execution of the yielded block.
  #
  #   collect_deprecations(CustomDeprecator) do
  #     CustomDeprecator.warn "message"
  #   end # => ["message"]
  #
  # If no +deprecator+ is given, defaults to ActiveSupport::Deprecation.
  #
  #   collect_deprecations do
  #     CustomDeprecator.warn "custom message"
  #     ActiveSupport::Deprecation.warn "message"
  #   end # => ["message"]
  def collect_deprecations: (?untyped? deprecator) { () -> untyped } -> untyped
end
