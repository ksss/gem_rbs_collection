# !!! GENERATED CODE !!!
# Please see generators/rails-generator

class Date
  # Duck-types as a Date-like class. See Object#acts_like?.
  def acts_like_date?: () -> true
  # No Date is blank:
  #
  #   Date.today.blank? # => false
  #
  # @return [false]
  def blank?: () -> false
  # Returns the week start (e.g. +:monday+) for the current request, if this has been set (via Date.beginning_of_week=).
  # If <tt>Date.beginning_of_week</tt> has not been set for the current request, returns the week start specified in <tt>config.beginning_of_week</tt>.
  # If no +config.beginning_of_week+ was specified, returns +:monday+.
  def self.beginning_of_week: () -> untyped
  # Sets <tt>Date.beginning_of_week</tt> to a week start (e.g. +:monday+) for current request/thread.
  #
  # This method accepts any of the following day symbols:
  # +:monday+, +:tuesday+, +:wednesday+, +:thursday+, +:friday+, +:saturday+, +:sunday+
  def self.beginning_of_week=: (untyped week_start) -> untyped
  # Returns week start day symbol (e.g. +:monday+), or raises an +ArgumentError+ for invalid day symbol.
  def self.find_beginning_of_week!: (untyped week_start) -> untyped
  # Returns a new Date representing the date 1 day ago (i.e. yesterday's date).
  def self.yesterday: () -> untyped
  # Returns a new Date representing the date 1 day after today (i.e. tomorrow's date).
  def self.tomorrow: () -> untyped
  # Returns Time.zone.today when <tt>Time.zone</tt> or <tt>config.time_zone</tt> are set, otherwise just returns Date.today.
  def self.current: () -> untyped
  # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)
  # and then subtracts the specified number of seconds.
  def ago: (untyped seconds) -> untyped
  # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)
  # and then adds the specified number of seconds
  def since: (untyped seconds) -> untyped
  alias in since
  # Converts Date to a Time (or DateTime if necessary) with the time portion set to the beginning of the day (0:00)
  def beginning_of_day: () -> untyped
  alias midnight beginning_of_day
  alias at_midnight beginning_of_day
  alias at_beginning_of_day beginning_of_day
  # Converts Date to a Time (or DateTime if necessary) with the time portion set to the middle of the day (12:00)
  def middle_of_day: () -> untyped
  alias midday middle_of_day
  alias noon middle_of_day
  alias at_midday middle_of_day
  alias at_noon middle_of_day
  alias at_middle_of_day middle_of_day
  # Converts Date to a Time (or DateTime if necessary) with the time portion set to the end of the day (23:59:59)
  def end_of_day: () -> untyped
  alias at_end_of_day end_of_day
  def plus_with_duration: (untyped other) -> untyped
  alias plus_without_duration +
  def minus_with_duration: (untyped other) -> untyped
  alias minus_without_duration -
  # Provides precise Date calculations for years, months, and days. The +options+ parameter takes a hash with
  # any of these keys: <tt>:years</tt>, <tt>:months</tt>, <tt>:weeks</tt>, <tt>:days</tt>.
  def advance: (untyped options) -> untyped
  # Returns a new Date where one or more of the elements have been changed according to the +options+ parameter.
  # The +options+ parameter is a hash with a combination of these keys: <tt>:year</tt>, <tt>:month</tt>, <tt>:day</tt>.
  #
  #   Date.new(2007, 5, 12).change(day: 1)               # => Date.new(2007, 5, 1)
  #   Date.new(2007, 5, 12).change(year: 2005, month: 1) # => Date.new(2005, 1, 12)
  def change: (untyped options) -> untyped
  # Allow Date to be compared with Time by converting to DateTime and relying on the <=> from there.
  def compare_with_coercion: (untyped other) -> untyped
  alias compare_without_coercion <=>
  # Convert to a formatted string. See DATE_FORMATS for predefined formats.
  #
  # This method is aliased to <tt>to_formatted_s</tt>.
  #
  #   date = Date.new(2007, 11, 10)       # => Sat, 10 Nov 2007
  #
  #   date.to_fs(:db)                     # => "2007-11-10"
  #   date.to_formatted_s(:db)            # => "2007-11-10"
  #
  #   date.to_fs(:short)         # => "10 Nov"
  #   date.to_fs(:number)        # => "20071110"
  #   date.to_fs(:long)          # => "November 10, 2007"
  #   date.to_fs(:long_ordinal)  # => "November 10th, 2007"
  #   date.to_fs(:rfc822)        # => "10 Nov 2007"
  #   date.to_fs(:iso8601)       # => "2007-11-10"
  #
  # == Adding your own date formats to to_fs
  # You can add your own formats to the Date::DATE_FORMATS hash.
  # Use the format name as the hash key and either a strftime string
  # or Proc instance that takes a date argument as the value.
  #
  #   # config/initializers/date_formats.rb
  #   Date::DATE_FORMATS[:month_and_year] = '%B %Y'
  #   Date::DATE_FORMATS[:short_ordinal] = ->(date) { date.strftime("%B #{date.day.ordinalize}") }
  def to_fs: (?::Symbol format) -> untyped
  alias to_formatted_s to_fs
  alias to_default_s to_s
  # Overrides the default inspect method with a human readable one, e.g., "Mon, 21 Feb 2005"
  def readable_inspect: () -> untyped
  alias default_inspect inspect
  include DateAndTime::Zones
  include DateAndTime::Calculations
  attr_accessor self.beginning_of_week_default: untyped
  DATE_FORMATS: Hash[Symbol, String | Proc]
  NOT_SET: Object
  VERSION: String
end
